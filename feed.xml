<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spencer Boucher</title>
    <description></description>
    <link>http://spencerboucher.com/</link>
    <atom:link href="http://spencerboucher.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Things I do in Emacs</title>
        <description>&lt;h2 id=&quot;email&quot;&gt;email&lt;/h2&gt;

&lt;p&gt;baz&lt;/p&gt;

&lt;h2 id=&quot;rss&quot;&gt;RSS&lt;/h2&gt;

&lt;h2 id=&quot;irc&quot;&gt;IRC&lt;/h2&gt;

&lt;h2 id=&quot;terminal&quot;&gt;terminal&lt;/h2&gt;

&lt;h2 id=&quot;files&quot;&gt;files&lt;/h2&gt;

&lt;h2 id=&quot;version-control&quot;&gt;version control&lt;/h2&gt;

&lt;h2 id=&quot;blog&quot;&gt;blog&lt;/h2&gt;

&lt;p&gt;This very blog is constructed entirely within emacs! The version
control workflow mentioned above plays a huge role, but several other
Emacs packages make maintaining a Jekyll blog even easier.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rakefile&lt;/li&gt;
&lt;li&gt;foreman&lt;/li&gt;
&lt;li&gt;jekyll&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pdfs&quot;&gt;PDFs&lt;/h2&gt;

&lt;h2 id=&quot;launch-agents&quot;&gt;launch agents&lt;/h2&gt;

&lt;h2 id=&quot;ssh-tunnels&quot;&gt;ssh tunnels&lt;/h2&gt;

&lt;h2 id=&quot;sql&quot;&gt;SQL&lt;/h2&gt;

&lt;h2 id=&quot;repls&quot;&gt;REPls&lt;/h2&gt;

&lt;h2 id=&quot;programming&quot;&gt;programming&lt;/h2&gt;

&lt;p&gt;Finally, the obvious one.&lt;/p&gt;

&lt;h3 id=&quot;flycheck&quot;&gt;flycheck&lt;/h3&gt;
</description>
        <pubDate>Mon, 18 Jan 2016 19:42:32 -0800</pubDate>
        <link>http://spencerboucher.com/things-i-do-in-emacs/</link>
        <guid isPermaLink="true">http://spencerboucher.com/things-i-do-in-emacs/</guid>
      </item>
    
      <item>
        <title>testing reveal slides</title>
        <description>&lt;section &gt;&lt;h2 id=&quot;this-is-a-slide-with-just-an-h2-tag&quot;&gt;This is a slide with just an h2 tag&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;foo&lt;/li&gt;
&lt;li&gt;bar&lt;/li&gt;
&lt;li&gt;baz&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;

&lt;section &gt;&lt;section &gt;&lt;h2 id=&quot;this-is-a-vertical-slide&quot;&gt;This is a vertical slide&lt;/h2&gt;

&lt;p&gt;ooh so vert&lt;/p&gt;
&lt;/section&gt;

&lt;section &gt;&lt;h2 id=&quot;this-is-the-second-vertical-slide&quot;&gt;This is the second vertical slide&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/avatar.jpg&quot; alt=&quot;this is an image&quot;&gt;&lt;/p&gt;
&lt;/section&gt;

&lt;p&gt;&lt;/section&gt;&lt;/p&gt;

&lt;section data-background=&quot;#dddddd&quot; &gt;&lt;h2 id=&quot;this-slide-will-have-a-different-background-color&quot;&gt;This slide will have a different background color&lt;/h2&gt;
&lt;/section&gt;
</description>
        <pubDate>Mon, 18 Jan 2016 19:42:32 -0800</pubDate>
        <link>http://spencerboucher.com/testing-reveal-slides/</link>
        <guid isPermaLink="true">http://spencerboucher.com/testing-reveal-slides/</guid>
      </item>
    
      <item>
        <title>How to stay on the bleeding edge of data science</title>
        <description>&lt;p&gt;One of the most exciting things about being in the field of data
science is the speed with which things move. New developments crops up
almost every day, and if you want to be at the at the forefront, you
have to keep up. New tools, new algorithms, new statistical methods,
new debates and discussions about best practices &amp;ndash; it can be very
overwhelming. Here are some of the pieces of the system I use for
staying on the bleeding edge.&lt;/p&gt;

&lt;h2 id=&quot;rss-feeds&quot;&gt;RSS feeds&lt;/h2&gt;

&lt;p&gt;I use &lt;a href=&quot;https://github.com/skeeto/elfeed&quot;&gt;elfeed&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;mailing-lists&quot;&gt;Mailing lists&lt;/h2&gt;

&lt;p&gt;I use &lt;a href=&quot;https://github.com/djcb/mu&quot;&gt;mu4e&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;github&quot;&gt;GitHub&lt;/h2&gt;
</description>
        <pubDate>Mon, 18 Jan 2016 19:42:32 -0800</pubDate>
        <link>http://spencerboucher.com/how-to-stay-on-the-bleeding-edge-of-data-science/</link>
        <guid isPermaLink="true">http://spencerboucher.com/how-to-stay-on-the-bleeding-edge-of-data-science/</guid>
      </item>
    
      <item>
        <title>How this blog works</title>
        <description>&lt;h2 id=&quot;rakefile&quot;&gt;Rakefile&lt;/h2&gt;

&lt;h2 id=&quot;guardfile&quot;&gt;Guardfile&lt;/h2&gt;

&lt;h2 id=&quot;procfile&quot;&gt;Procfile&lt;/h2&gt;

&lt;h2 id=&quot;pow&quot;&gt;Pow&lt;/h2&gt;

&lt;h2 id=&quot;octopress&quot;&gt;Octopress&lt;/h2&gt;
</description>
        <pubDate>Mon, 18 Jan 2016 19:42:32 -0800</pubDate>
        <link>http://spencerboucher.com/how-this-blog-works/</link>
        <guid isPermaLink="true">http://spencerboucher.com/how-this-blog-works/</guid>
      </item>
    
      <item>
        <title>Maptime at Stamen</title>
        <description>&lt;p&gt;fooo&lt;/p&gt;

&lt;p&gt;Last week, a classmate and I took a break from coursework to attend
one of the many great Meetup events that San Francisco has to offer
for data science practitioners. I’ve been pushing myself to attend at
least one data-centric Meetup every week, because these events are one
of the most amazing parts about going to school in the same place
where so many of the biggest names work. To be honest, I believe that
becoming a presence in the data science scene and meeting the movers
and shakers is equally if not more important than coursework.&lt;/p&gt;

&lt;p&gt;I actually attended 3 meetups last week, one about D3.js at Trulia HQ,
one about GIS technologies and the Code for America HQ, and one about
mapping at Stamen HQ. I picked all three because they are relevant to
a geospatial data visualization that I am working on for my practicum
at AutoGrid, but the last one is what I’m going to talk a bit about,
because it was the most hands-on.&lt;/p&gt;

&lt;p&gt;The workshop took place at Stamen Design’s headquarters in the Mission
and was led by Eric Theise; you can see his beautiful/informative
slides (created using &lt;a href=&quot;http://lab.hakim.se/reveal-js&quot;&gt;reveal.js&lt;/a&gt;)
&lt;a href=&quot;http://erictheise.github.io/geostack-deck&quot;&gt;here&lt;/a&gt;. Some useful Q&amp;amp;A
happened on
&lt;a href=&quot;http://www.meetup.com/Maptime-SF/events/147110652&quot;&gt;the Meetup event page as well&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This was actually a two-part workshop, but it was relatively painless
to follow the instructions and get up to speed for the part II, so you
should really give it a shot even now if it looks interesting.&lt;/p&gt;

&lt;p&gt;First we got postgres up and running on our machines. I have local
installations of MySQL, MongoDB, Hadoop and Hive up and running thanks
to our course in Distributed Databases, but our class didn’t have time
to get to postgres within a single credit hour. This, despite the fact
that our professor admits to postgres being the best database to use
if you have anything to say about it.&lt;/p&gt;

&lt;p&gt;Next, we populated our database with some data from
OpenStreetMap. Mike Migurski extracts data from OSM for major
metropolitan areas on a semi-regular basis, so we used the San
Francisco data [available on his web site][] via
&lt;a href=&quot;http://wiki.openstreetmap.org/wiki/Osm2pgsql&quot;&gt;osm2pgsql&lt;/a&gt;, a
command-line utility that loads OpenStreetMap data into PostgreSQL
databases.&lt;/p&gt;

&lt;p&gt;Then we used &lt;a href=&quot;https://www.mapbox.com/tilemill&quot;&gt;TileMill&lt;/a&gt;, MapBox’s
desktop application, to visualize our newborn database. We discovered
how remarkably easy it can be to create vector layers for data
contained in such a postGIS database using the same old SQL and CSS
syntax you already know and love. Eric introduced us to some sensible
pre-baked
&lt;a href=&quot;https://github.com/gravitystorm/openstreetmap-carto&quot;&gt;CartoCSS boilerplate&lt;/a&gt;
courtesy of Andy Allen.&lt;/p&gt;

&lt;p&gt;Lastly, we used a nifty feature of TileMill to actually bake our own
map tiles and serve them up for use in our own maps. Note that if you
want to do this, you’ll need the
&lt;a href=&quot;https://github.com/mapbox/mbutil&quot;&gt;mbutil command-line utility&lt;/a&gt;, not
currently mentioned in the slide deck.&lt;/p&gt;

&lt;p&gt;Not too shabby for 2 hours on a Wednesday night. Many thanks to the
guys at Stamen for hosting, especially Eric for all his work on the
slides. Not to mention the many other brilliant people who have made
the tools and resources that allow something this involved and
grandiose to be done on a laptop by someone who is still learning the
ropes. Hands-on workshops like this are one of the best ways to learn
these technologies. Case in point, I may not have ever stumbled across
Mike or Andy’s resources had I not been learning directly from people
who are intimately familiar with the practical ins and outs of digital
cartography.&lt;/p&gt;

&lt;p&gt;Digital mapping is rapidly capturing my interest because of the
beautifully functional things one can do with it, and it seems like an
amazing time to be learning it, because the ecosystem is beginning to
really flourish. Looking forward to more events!&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Dec 2014 00:00:00 -0800</pubDate>
        <link>http://spencerboucher.com/maptime-at-stamen/</link>
        <guid isPermaLink="true">http://spencerboucher.com/maptime-at-stamen/</guid>
      </item>
    
      <item>
        <title>Scheduling tasks in the cloud with EC2 APIs</title>
        <description>&lt;p&gt;This post is sort of an addendum to our &lt;a href=&quot;&quot;&gt;live-mapping project&lt;/a&gt;, but
it should also be of use to anyone looking to run an arbitrary script
on a recurring schedule. Originally, we set up a 24/7 instance on
&lt;a href=&quot;http://aws.amazon.com/ec2&quot;&gt;Amazon&amp;rsquo;s Elastic Compute Cloud&lt;/a&gt; that ran a
daily &lt;code&gt;cron&lt;/code&gt; job. This works, but its a bit wasteful because we&amp;rsquo;re
paying for 24 hours of cloud even though we&amp;rsquo;re only actually using it
for maybe 5 minutes a day.&lt;/p&gt;

&lt;p&gt;Fortunately, Amazon provides a
&lt;a href=&quot;http://aws.amazon.com/developertools&quot;&gt;schmorgesborg&lt;/a&gt; of command line
interface (CLI) tools that allow us to manage our cloud instances more
efficiently. Specifically, we want to schedule an instance to spin up
only once a day, execute our script, then shut back down. To
accomplish this, we will want three CLI tools:
&lt;a href=&quot;http://aws.amazon.com/developertools/368&quot;&gt;the Amazon EC2 AMI Tools&lt;/a&gt; ,
&lt;a href=&quot;http://aws.amazon.com/developertools/351&quot;&gt;the Amazon EC2 API Tools&lt;/a&gt;
,and
&lt;a href=&quot;http://aws.amazon.com/developertools/2535&quot;&gt;the Auto Scaling Command Line Tool&lt;/a&gt;
. If you&amp;rsquo;re on a Mac, it&amp;rsquo;s way easier to get these with
&lt;a href=&quot;http://brew.sh&quot;&gt;Homebrew&lt;/a&gt; than by downloading from Amazon&amp;rsquo;s website:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;brew install ec2-ami-tools &lt;span class=&quot;c&quot;&gt;# For creating an AMI from an existing machine&lt;/span&gt;
brew install ec2-api-tools &lt;span class=&quot;c&quot;&gt;# For registering and launching instances&lt;/span&gt;
brew install aws-as &lt;span class=&quot;c&quot;&gt;# For creating auto scaling groups/defining schedules&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As an extra Homebrew bonus, running &lt;code&gt;brew info ec2-ami-tools&lt;/code&gt;, &lt;code&gt;brew
info ec2-api-tools&lt;/code&gt;, and &lt;code&gt;brew info aws-as&lt;/code&gt; will now tell us exactly
what we need to do to get our authentication and environment variables
all set up. First we are told to download the necessary .pem files
from the Amazon console and place them into a new hidden directory of
our home directory &lt;code&gt;.ec2&lt;/code&gt;. Then we tell our command line where
everything lives now by inserting the following lines into our
&lt;code&gt;.bashrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EC2_PRIVATE_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;/bin/ls &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;/.ec2/pk-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.pem | /usr/bin/head -1&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EC2_CERT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;/bin/ls &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;/.ec2/cert-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.pem | /usr/bin/head -1&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EC2_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/local/Cellar/ec2-api-tools/1.6.12.0/libexec&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;AWS_AUTO_SCALING_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/local/Cellar/auto-scaling/1.0.61.4/libexec&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EC2_AMITOOL_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/local/Cellar/ec2-ami-tools/1.4.0.9/libexec&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EC2_REGION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;us-west-2&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EC2_ZONE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EC2_REGION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;a
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EC2_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://&lt;span class=&quot;nv&quot;&gt;$EC2_REGION&lt;/span&gt;.ec2.amazonaws.com
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;AWS_AUTO_SCALING_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://autoscaling.&lt;span class=&quot;nv&quot;&gt;$EC2_REGION&lt;/span&gt;.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Its pretty simple, but if you have any trouble with this part, refer
to the official
&lt;a href=&quot;http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/SettingUp_CommandLine.html&quot;&gt;Amazon documentation for setting up the command line&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Because these environment variables are recognized out of the box by
the CLI tools, we won&amp;rsquo;t need to point to our authentication keys or
specify a region every time we make an API call and our next commands
will be much more succinct. Note that every EC2 instance is physically
located at one of several regions; we are using us-west-2 because it
happens to be where I spun up the existing instance that currently
holds our &amp;ldquo;update.py&amp;rdquo; script, but any of them would probably work just
fine for the simple job at hand.&lt;/p&gt;

&lt;div class=&quot;table-responsive&quot;&gt; &lt;table class=&quot;table table-striped
  table-condensed &quot;&gt; &lt;tr&gt; &lt;th&gt;Code&lt;/th&gt; &lt;th&gt;Region&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt;
  &lt;td&gt;ap-northeast-1&lt;/td&gt; &lt;td&gt; Asia Pacific (Tokyo) Region&lt;/td&gt; &lt;/tr&gt;
  &lt;tr&gt; &lt;td&gt;ap-southeast-1&lt;/td&gt; &lt;td&gt;Asia Pacific (Singapore)
  Region&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;ap-southeast-2&lt;/td&gt; &lt;td&gt;Asia Pacific
  (Sydney) Region&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;eu-west-1&lt;/td&gt; &lt;td&gt;EU (Ireland)
  Region&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;sa-east-1&lt;/td&gt; &lt;td&gt;South America (Sao
  Paulo) Region&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;us-east-1&lt;/td&gt; &lt;td&gt;US East
  (Northern Virginia) Region&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;us-west-1&lt;/td&gt; &lt;td&gt;US
  West (Northern California) Region&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;us-west-2&lt;/td&gt;
  &lt;td&gt;US West (Oregon) Region&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt;

&lt;p&gt;So, first things first. We can&amp;rsquo;t just spin up an off-the-rack EC2
instance every day, because we&amp;rsquo;ll run into the same problem that I
originally had with my web host: the Python modules that we need won&amp;rsquo;t
be installed. We &lt;em&gt;could&lt;/em&gt; write a script that would install &lt;code&gt;pip&lt;/code&gt; plus
all of the requisite Python modules and run it first thing after we
launch the instance, but there&amp;rsquo;s a better way:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bash ec2-create-image i-8918e1be -n &amp;quot;Map Update Image&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This command from &lt;code&gt;ec2-ami-tools&lt;/code&gt; creates an &amp;ldquo;Amazon Machine Image&amp;rdquo; of
the instance that we previously had running and names it &amp;ldquo;Map Update
Image&amp;rdquo;. A new image ID will now print to your console, &lt;code&gt;ami-fcdfb9cc&lt;/code&gt;
in my case. This is tantamount to cloning the instance, because we can
now reference the new image ID when we spin up new instances and all
of our modules, scripts, etc. will be there waiting for us. Note that
I removed the instance&amp;rsquo;s &lt;code&gt;cron&lt;/code&gt; job &lt;em&gt;before&lt;/em&gt; creating the AMI, because
we&amp;rsquo;ll now be handling the task scheduling from &lt;em&gt;outside&lt;/em&gt; the instance,
via &lt;strong&gt;autoscaling&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Next let&amp;rsquo;s write a shell script that will execute our Python
map-updating script, shoot us a diagnostic email, then shut down the
instance that its running on. The idea here is that once a day we&amp;rsquo;re
going to spin up an instance using our shiny new AMI and immediately
run this new script (let&amp;rsquo;s call it &amp;ldquo;update.sh&amp;rdquo;) that will do its
business and then promptly commit seppuku and stop charging us
money. Eric Hammond has created a great template on
&lt;a href=&quot;http://alestic.com/2011/11/ec2-schedule-instance&quot;&gt;his blog&lt;/a&gt;, which
I&amp;rsquo;ve modified below. Note the execution of our &lt;a href=&quot;&quot;&gt;familiar&lt;/a&gt;
&amp;ldquo;update.py&amp;rdquo; script highlighted on line 4, and the apoptosis command on
line 46:&lt;/p&gt;

&lt;p&gt;&amp;ldquo;`bash #!/bin/bash -x exec &amp;gt; &amp;gt;(tee /var/log/user-data.log|logger -t
user-data -s 2&amp;gt;/dev/console) 2&amp;gt;&amp;amp;1&lt;/p&gt;

&lt;p&gt;/usr/bin/python /home/ubuntu/update.py # Run the script&lt;/p&gt;

&lt;p&gt;EMAIL=spencer.g.boucher@gmail.com&lt;/p&gt;

&lt;h1 id=&quot;upgrade-and-install-postfix-so-we-can-send-a-sample-email-export&quot;&gt;Upgrade and install Postfix so we can send a sample email export&lt;/h1&gt;

&lt;p&gt;DEBIAN_FRONTEND=noninteractive apt-get update &amp;amp;&amp;amp; apt-get upgrade -y &amp;amp;&amp;amp;
apt-get install -y postfix&lt;/p&gt;

&lt;h1 id=&quot;get-some-information-about-the-running-instance-instance_id-wget&quot;&gt;Get some information about the running instance instance_id=$(wget&lt;/h1&gt;

&lt;p&gt;-qO- instance-data/latest/meta-data/instance-id) public_ip=$(wget -qO-
instance-data/latest/meta-data/public-ipv4) zone=$(wget -qO-
instance-data/latest/meta-data/placement/availability-zone)
region=$(expr match $zone &amp;rsquo;(.*).&amp;rsquo;)  uptime=$(uptime)&lt;/p&gt;

&lt;h1 id=&quot;send-status-email-usr-sbin-sendmail-oi-t-f-email-lt-lt-eom-from&quot;&gt;Send status email /usr/sbin/sendmail -oi -t -f $EMAIL &amp;lt;&amp;lt;EOM From:&lt;/h1&gt;

&lt;p&gt;$EMAIL To: $EMAIL Subject: Results of EC2 scheduled script&lt;/p&gt;

&lt;p&gt;This email message was generated on the following EC2 instance:&lt;/p&gt;

&lt;p&gt;instance id: $instance&lt;em&gt;id region: $region public ip: $public&lt;/em&gt;ip
  uptime: $uptime&lt;/p&gt;

&lt;p&gt;If the instance is still running, you can monitor the output of this
job using a command like:&lt;/p&gt;

&lt;p&gt;ssh ubuntu@$public_ip tail -1000f /var/log/user-data.log&lt;/p&gt;

&lt;p&gt;ec2-describe-instances &amp;ndash;region $region $instance_id&lt;/p&gt;

&lt;p&gt;EOM&lt;/p&gt;

&lt;h1 id=&quot;give-the-script-and-email-some-time-to-do-their-thing-sleep-600-10&quot;&gt;Give the script and email some time to do their thing sleep 600 # 10&lt;/h1&gt;

&lt;p&gt;minutes&lt;/p&gt;

&lt;h1 id=&quot;this-will-stop-the-ebs-boot-instance-stopping-the-hourly-charges&quot;&gt;This will stop the EBS boot instance, stopping the hourly charges.&lt;/h1&gt;

&lt;h1 id=&quot;have-auto-scaling-terminate-it-stopping-the-storage-charges&quot;&gt;Have Auto Scaling terminate it, stopping the storage charges.&lt;/h1&gt;

&lt;h1 id=&quot;shutdown-h-now&quot;&gt;shutdown -h now&lt;/h1&gt;

&lt;p&gt;exit 0 &amp;rdquo;`&lt;/p&gt;

&lt;p&gt;Note that the user data script that we pass to the launch
configuration executes with &lt;em&gt;root&lt;/em&gt; permissions, not as the user
&amp;ldquo;ubuntu&amp;rdquo; that you would typically log in as via &lt;code&gt;ssh&lt;/code&gt;. Its probably
best to be as explicit as possible when specifying path names in the
cloud, the tilde operator might turn around and bite you.&lt;/p&gt;

&lt;p&gt;Now we need to create &lt;strong&gt;launch configuration&lt;/strong&gt; that will basically do
all the button-pushing that we would normally be doing at the AWS
console GUI.&lt;/p&gt;

&lt;p&gt;Here we specify:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &amp;ldquo;Micro&amp;rdquo; as our instance type.&lt;/li&gt;
&lt;li&gt;  Our shell script &amp;ldquo;update.sh&amp;rdquo; from step 2 as the
&amp;ldquo;user-data-file&amp;rdquo;. User data files are passed into the instance and
executed immediately when supplied in the launch
configuration. They must be less than 16kb as I suppose they are
stored on some ancillary server somewhere.&lt;/li&gt;
&lt;li&gt;  The AMI image that we cloned in step 1 from the instance that
included our Python modules.&lt;/li&gt;
&lt;li&gt;  The name of the launch config; let&amp;rsquo;s call it
&amp;ldquo;map-update-launch-config&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;bash as-create-launch-config --instance-type t1.micro
--user-data-file ~/Desktop/update.sh --image-id ami-fcdfb9cc
--launch-config &amp;quot;map-update-launch-config&amp;quot; as-describe-launch-configs
--headers&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note that the second line provides a list of all the launch
configurations that have been created.&lt;/p&gt;

&lt;p&gt;We must also create an &lt;strong&gt;auto scaling group&lt;/strong&gt;. These are typically
used as a sort of container to which we can add/remove instances on a
schedule or in response to heavy traffic, but we can also use it to
schedule a single instance to flick on and off. We need to tell it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  A name to assign the scaling group (&amp;ldquo;map-update-scale-group&amp;rdquo;).&lt;/li&gt;
&lt;li&gt;  The name of the launch configuration we created in step 3
(&amp;ldquo;map-update-launch-config&amp;rdquo;).&lt;/li&gt;
&lt;li&gt;  Which availability zone we want to use (basically irrelevant; we
set our environment variable &lt;code&gt;EC2_ZONE&lt;/code&gt; to &amp;ldquo;a&amp;rdquo;
earlier). &lt;code&gt;ec2-describe-available-zones&lt;/code&gt; provides a list of the
available zones&lt;/li&gt;
&lt;li&gt;  A minimum and maximum number of instances in the group. We&amp;rsquo;ll
initialize these to zero.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;bash as-create-auto-scaling-group --auto-scaling-group
&amp;quot;map-update-scale-group&amp;quot; --launch-configuration
&amp;quot;map-update-launch-config&amp;quot; --availability-zones &amp;quot;$EC2_ZONE&amp;quot; --min-size
0 --max-size 0 as-suspend-processes &amp;quot;map-update-scale-group&amp;quot;
--processes ReplaceUnhealthy as-describe-auto-scaling-groups --headers
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the second line, we are using &lt;code&gt;as-suspend-processes&lt;/code&gt; to prevent the
instance&amp;rsquo;s default behavior which is to attempt to restart after it is
shut down. The third line provides a list of all the auto scaling
groups that have been created.&lt;/p&gt;

&lt;p&gt;Last but not least, we are ready to assign a schedule to our auto
scaling group. Here we create two: one to start the instance and one
to terminate the instance. Astute readers will recall that &amp;ldquo;update.sh&amp;rdquo;
already &lt;em&gt;stops&lt;/em&gt; the instance so that we aren&amp;rsquo;t paying to have it
running, but we also need to completely &lt;em&gt;terminate&lt;/em&gt; the instance so
that we aren&amp;rsquo;t paying to store information about it. Each schedule
requires:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  A name (&lt;code&gt;&amp;quot;map-update-start&amp;quot;&lt;/code&gt; &amp;amp; &lt;code&gt;&amp;quot;map-update-stop&amp;quot;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;  The name of the auto scaling group we created in step 4
(&amp;ldquo;map-update-scale-group&amp;rdquo;).&lt;/li&gt;
&lt;li&gt;  How we want to scale. By setting both &lt;code&gt;min-size&lt;/code&gt; and &lt;code&gt;max-size&lt;/code&gt; to
1, we are effectively turning on one instance. We later
effectively turn that instance back off by setting both to 0.&lt;/li&gt;
&lt;li&gt;  A &amp;ldquo;recurrence,&amp;rdquo; ie when to occur. This flag uses the same syntax
that &lt;code&gt;cron&lt;/code&gt; does. Here we set the instance to launch at midnight
UTC (&lt;code&gt;0 0 * * *&lt;/code&gt;), and terminate 15 minutes later (&lt;code&gt;15 0 * *
*&lt;/code&gt;). Recall that our script already stops the instance 10 minutes
after execution, so 15 minutes is playing it safe.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;bash as-put-scheduled-update-group-action --name &amp;quot;map-update-start&amp;quot;
--auto-scaling-group &amp;quot;map-update-scale-group&amp;quot; --min-size 1 --max-size
1 --recurrence &amp;quot;0 0 * * *&amp;quot; as-put-scheduled-update-group-action --name
&amp;quot;map-update-stop&amp;quot; --auto-scaling-group &amp;quot;map-update-scale-group&amp;quot;
--min-size 0 --max-size 0 --recurrence &amp;quot;15 0 * * *&amp;quot;
as-describe-scheduled-actions --headers&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As before, the third line provides a list of the actions that have
been scheduled.&lt;/p&gt;

&lt;p&gt;And thats it! We are now only paying for 10 or 15 minutes of cloud per
day, as opposed to 1,440 of them. To review the timeline we have
created in this example: our auto scaling group boots up an instance
up at midnight UTC that immediately executes &amp;ldquo;update.sh&amp;rdquo;. This
automatically executes &amp;ldquo;update.py&amp;rdquo; and shoots us a diagnostic
email. It then waits 10 minutes to make sure everything has time to
run, before stopping the instance. 5 minutes after &lt;em&gt;that&lt;/em&gt; the auto
scaling group then completely terminates the instance.&lt;/p&gt;

&lt;p&gt;Other great resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  [Official Amazon documentation for scheduling auto scaling groups][]&lt;/li&gt;
&lt;li&gt;  &lt;a href=&quot;http://alestic.com/2011/11/ec2-schedule-instance&quot;&gt;Running EC2 Instances on a Recurring Schedule with Auto Scaling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  &lt;a href=&quot;http://www.robertsindall.co.uk/blog/how-to-use-amazons-auto-scaling-groups&quot;&gt;Summary of API commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  &lt;a href=&quot;http://www.cardinalpath.com/autoscaling-your-website-with-amazon-web-services-part-2&quot;&gt;Auto Scaling Your Website with Amazon Web Services&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 12 Jan 2014 00:00:00 -0800</pubDate>
        <link>http://spencerboucher.com/ec2-apis/</link>
        <guid isPermaLink="true">http://spencerboucher.com/ec2-apis/</guid>
      </item>
    
      <item>
        <title>Stratified sampling in R</title>
        <description>&lt;p&gt;I was surprised to find that R doesn’t have a base function for
stratified random sampling. There’s not even a well known package I
could find that does this in a straight forward way. So heres my own.&lt;/p&gt;

&lt;p&gt;It is essentially a wrapper for a ddply call that samples each subset
and then combines them. If the size argument is less than 1, it will
be interpreted as the percentage of each stratification subset that
should be sampled. If the size argument is greater than 1, it will be
interpreted as the number of observations to sample from each
stratification subset.&lt;/p&gt;

&lt;p&gt;Note that in the first case, a different number of observations will
be taken from each subset depending on their total number of
observations. In the second case however, an equal number of
observations will be sampled from each subset, regardless of their
total number of observations.&lt;/p&gt;

&lt;p&gt;The .by argument is formulated the same way it is for any other ddply
call.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-R&quot; data-lang=&quot;R&quot;&gt;&lt;span class=&quot;n&quot;&gt;stratified_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;.by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;37L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plyr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;set.seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;df.sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ddply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;.by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),])&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                     &lt;span class=&quot;n&quot;&gt;.progress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;text&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df.sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Fri, 10 Jan 2014 00:00:00 -0800</pubDate>
        <link>http://spencerboucher.com/stratified-sampling-in-r/</link>
        <guid isPermaLink="true">http://spencerboucher.com/stratified-sampling-in-r/</guid>
      </item>
    
      <item>
        <title>Live mapping</title>
        <description>&lt;p&gt;I&amp;rsquo;ve been wanting to do some more mapping stuff since my first
encounter with Leaflet a month or two ago while I was working on a
project for &lt;a href=&quot;https://auto-grid.com&quot;&gt;AutoGrid&lt;/a&gt;. I had my eye on
CartoDB&amp;rsquo;s time series library,
&lt;a href=&quot;https://github.com/cartodb/torque&quot;&gt;Torque&lt;/a&gt;, because I had really
wanted to do some time-series visualization, but time constraints and
privacy issues with uploading data to CartoDB&amp;rsquo;s servers prevented me
from really exploring. Since I had a few days of free time over winter
break, I played around with it a bit and came up with this:
&lt;a href=&quot;http://www.spencerboucher.com/map&quot;&gt;spencerboucher.com/map&lt;/a&gt;. How&amp;rsquo;d I do it?&lt;/p&gt;

&lt;p&gt;First I needed some geographic data, so I turned to a source of data
I&amp;rsquo;ve been collected for almost a year - my own
location. &lt;a href=&quot;https://openpaths.cc&quot;&gt;OpenPaths&lt;/a&gt; is a mobile app that
records your location at regular time intervals. I opted for every 30
minutes at first, then upped it to every 15 minutes when I discovered
that the effect on battery life wasn&amp;rsquo;t nearly as bad as I expected it
to be. OpenPaths is a project of
&lt;a href=&quot;https://nytlabs.com&quot;&gt;the R&amp;amp;D department at The New York Times&lt;/a&gt; and
they &lt;a href=&quot;https://openpaths.cc/FAQ&quot;&gt;claim&lt;/a&gt; that you are the only one with access to the collected
data. Interestingly, you can grant various &lt;a href=&quot;https://openpaths.cc/projects&quot;&gt;research programs&lt;/a&gt;
access to your data at your own discretion. Your data is conveniently
downloadable as a csv, json, or kml file, so I easily pulled my
dataset of ~3,000 time points since December 2012. Unfortunately, I
made the switch from iPhone to Android around April (well, that part
is fortunate), and forgot to re-download the app, so I only really
have data from the around the first three months and last two months
of 2013.&lt;/p&gt;

&lt;p&gt;Turns out, making impressive maps with CartoDB is almost
embarrassingly easy. Their GUI is pretty intuitive and running queries
on their postgreSQL database is simple. Even time series stuff built
on the Torque backend is really just point and click. I decided that
the best way to visualize this data was with an aggregated hexbin
heatmap of all my past locations, overlaid with a point-by-point
replay with a time-slider. From there, it was just a one-line API call
to host the map on my website (line 30 highlighted below), which is
significantly easier than the legwork that went into crafting a
Leaflet map &amp;ldquo;manually.&amp;rdquo;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;initial-scale=1.0, user-scalable=no&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Location | Spencer&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;shortcut icon&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://spencerboucher.com/map/favicon.png&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://libs.cartocdn.com/cartodb.js/v3/themes/css/cartodb.css&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--[if lte IE 8]&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;http://libs.cartocdn.com/cartodb.js/v3/themes/css/cartodb.ie.css&quot; /&amp;gt;
  &amp;lt;![endif]--&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;style &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;#cartodb-gmaps-attribution&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;visibility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maps.google.com/maps/api/js?v=3.2&amp;amp;sensor=false&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://libs.cartocdn.com/cartodb.js/v3/cartodb.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;cartodb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createVis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;map&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;http://justmytwospence.cartodb.com/api/v2/viz/e8fd87d0-78b3-11e3-a9e9-e7941b6e2df0/viz.json&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onload=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;init()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;map&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is pretty awesome, but in light of how easy it all was, I was
almost disappointed. Can we take it one step further? Let&amp;rsquo;s put on our
&lt;a href=&quot;http://quantifiedself.com/about/&quot;&gt;Quantified Self&lt;/a&gt; hats and set about to make this map
&lt;em&gt;live&lt;/em&gt;. There&amp;rsquo;s three components to making this happen, so we&amp;rsquo;ll step
through them one at a time. First we need to access the most recent
data from OpenPaths (there&amp;rsquo;s an API for that!), and then we need to
insert that data into CartoDB&amp;rsquo;s database (guess what, there&amp;rsquo;s an API
for that too). Last but not least, we need to schedule that data
transplant to occur on a regular basis. The Unix utility &lt;code&gt;cron&lt;/code&gt; is the
canonical tool for this type of thing, so this seemed like a good time
to learn how to use it.&lt;/p&gt;

&lt;p&gt;Python has a reputation for being a great &amp;ldquo;glue&amp;rdquo; language, so that&amp;rsquo;s
what we&amp;rsquo;ll use to build this script.&lt;/p&gt;

&lt;p&gt;Programmatically accessing your data from OpenPaths is super
simple. This piece of our script is pulled more or less verbatim from
&lt;a href=&quot;https://openpaths.cc/api&quot;&gt;the OpenPaths API documentation&lt;/a&gt;. Line 21 (highlighted below) is
key - this is where we specify which data you want to pull for
injection into the CartoDB database. Here we will grab the last 24
hours of data (~96 readings, if you&amp;rsquo;re collecting every 15 minutes
like me), getting the results in a nice JSON-formatted variable named
&lt;code&gt;data&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;oauth2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ACCESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;redacted&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SECRET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;redacted&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;https://openpaths.cc/api/1&#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build_auth_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&#39;oauth_version&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&#39;oauth_nonce&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oauth2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate_nonce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&#39;oauth_timestamp&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;consumer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oauth2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ACCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SECRET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;oauth_consumer_key&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oauth2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;signature_method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oauth2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SignatureMethod_HMAC_SHA1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sign_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signature_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;start_time&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;end_time&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# get the last 24 hours&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s?&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlencode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#print(query)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build_auth_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;GET&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HTTPError&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we need to get our new &lt;code&gt;data&lt;/code&gt; variable into CartoDB&amp;rsquo;s postgreSQL
server. &lt;a href=&quot;http://developers.cartodb.com/documentation/sql-api.html&quot;&gt;CartoDB&amp;rsquo;s SQL API documentation&lt;/a&gt; makes this possible, and
there&amp;rsquo;s even a &lt;a href=&quot;https://github.com/vizzuality/cartodb-python&quot;&gt;python module&lt;/a&gt; that wraps OAuth2 to simplify
things. Although its still in the early stages of development, this
module works fine for our current purposes; all we have to do is send
it a string that holds the SQL query we want to run. So now we&amp;rsquo;ll just
write a for-loop that successively builds an &lt;code&gt;INSERT&lt;/code&gt; query for each
element in &lt;code&gt;data&lt;/code&gt; (lines 18-20 highlighted below).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cartodb&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CartoDBException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CartoDBAPIKey&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;&#39;spencer.g.boucher@gmail.com&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;&#39;redacted&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cartodb_domain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;justmytwospence&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;API_KEY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;redacted&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CartoDBAPIKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;API_KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cartodb_domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reading&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;alt&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;reading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;device&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lat&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;lat&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lon&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;lon&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;reading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;os&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;t&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;reading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;version&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;query_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;INSERT INTO openpaths_justmytwospence (alt, date, device, lat,  lon, os, version, the_geom) &quot;&lt;/span&gt;
                       &lt;span class=&quot;s&quot;&gt;&quot;VALUES ({0}, abstime({1}), &#39;{2}&#39;, {3}, {4}, &#39;{5}&#39;, &#39;{6}&#39;, ST_ SetSRID(ST_Point({4}, {3}), 4326))&quot;&lt;/span&gt;
                      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CartoDBException&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;some error ocurred&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A few notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  It would certainly be faster to insert all of the new data into the
database using a single &lt;code&gt;INSERT&lt;/code&gt; statement, but that would require
some more tedious text parsing and execution speed isn&amp;rsquo;t
particularly important to us. As it stands, it takes about six
seconds to post a day&amp;rsquo;s worth of data.&lt;/li&gt;
&lt;li&gt;  One posgreSQL &amp;ldquo;gotcha&amp;rdquo; had me hung up for quite some time: single
quotes parse fine but double quotes do not.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;ST_SetSRID&lt;/code&gt; is a &lt;a href=&quot;http://postgis.org/docs/ST_SetSRID.html&quot;&gt;PostGIS command&lt;/a&gt; that converts a lon/lat pair
(in that order - another &amp;ldquo;gotcha&amp;rdquo;) to the necessary geometry object.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Last but not least, we need this script to run automatically. Because
we&amp;rsquo;ve written the script to transplant 24 hours of data, we&amp;rsquo;ll need to
run it once a day in order to capture all of the data that&amp;rsquo;s being
generated. I tried to set up my web host, &lt;a href=&quot;https://laughingsquid.us/&quot;&gt;LaughingSquid&lt;/a&gt;, to do
this, but unfortunately they don&amp;rsquo;t grant shell access so we can&amp;rsquo;t
install all those fancy python modules that we&amp;rsquo;ve already used. Its
totally possible to rewrite the script to use only modules from the
&lt;a href=&quot;http://docs.python.org/2/library/&quot;&gt;Python Standard Library&lt;/a&gt;, but this would turn a simple task into a
tedious one. Manually implementing OAuth in particular would be a
total pain in the rear, and classes are just about to resume after
all, so a different solution is in order. Let&amp;rsquo;s spin up a
&lt;a href=&quot;http://aws.amazon.com/&quot;&gt;&amp;ldquo;micro&amp;rdquo; EC2 instance&lt;/a&gt; instead. This gives us free reign to install
whatever we need for the low low cost of ¢.02 per hour. This does
start to add up, but our Master&amp;rsquo;s program gives us some pretty
substantial Amazon Web Services credit that goes mostly unused, so we
aren&amp;rsquo;t too upset :). UPDATE: A new post provides details about how to
schedule Amazon EC2 instances -
&lt;a href=&quot;http://www.spencerboucher.com/ec2-apis/&quot;&gt;http://www.spencerboucher.com/ec2-apis/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After &lt;code&gt;pip install&lt;/code&gt;ing everything we need and &lt;code&gt;scp&lt;/code&gt;ing our python
script (let&amp;rsquo;s call it update.py) into the home directory of our remote
server, all we need to do is set up a crontab with the &lt;code&gt;crontab -e&lt;/code&gt;
command and add the following line:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;@daily /usr/bin/python ~/update.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;@daily&lt;/code&gt; is actually a shortcut for &lt;code&gt;* * * * *&lt;/code&gt;, where each asterix is
a placeholder for the (respectively) minute, hour, day of month,
month, and day of week that the script should executed. This shortcut
defaults to midnight every day, which is really as good as anything
for our purposes.&lt;/p&gt;

&lt;p&gt;Voilà! Now we can step back and relax, knowing that we don&amp;rsquo;t have to
do a single thing and our map will continue to show the most
up-to-date data available.&lt;/p&gt;

&lt;p&gt;A few final notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We might reasonably want to lag our script by a week or so, for
security/privacy reasons.&lt;/li&gt;
&lt;li&gt;As far as I can tell, the location readings are recorded in a
&lt;a href=&quot;http://en.wikipedia.org/wiki/Unix_time&quot;&gt;POSIX time&lt;/a&gt; and have not been adjusted by time zone, so they are
still in the &lt;a href=&quot;http://en.wikipedia.org/wiki/Coordinated_Universal_Time&quot;&gt;UTC&lt;/a&gt; time zone. This means that they are 8 hours
off from the actual time in California, where I usually am. This
doesn&amp;rsquo;t bother me too much at the moment because the visualization
is still relatively low resolution in the time domain anyways. At
some point I might implement the relevant transformation, but this
will raise its own issues because I won&amp;rsquo;t &lt;em&gt;always&lt;/em&gt; be in
California, not to mention all that Daylight Savings nonsense.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.spencerboucher.com/ec2-apis/&quot;&gt;Click here for an addendum to this post that will take you through how to schedule the EC2 instance and avoid having it run 24/7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 08 Jan 2014 00:00:00 -0800</pubDate>
        <link>http://spencerboucher.com/live-mapping/</link>
        <guid isPermaLink="true">http://spencerboucher.com/live-mapping/</guid>
      </item>
    
      <item>
        <title>On being approximate</title>
        <description>&lt;blockquote&gt;
&lt;p&gt;It is hard to tell how many investors beat the stock market&lt;/p&gt;

&lt;p&gt;over the long run,&lt;/p&gt;

&lt;p&gt;because the data is very noisy,&lt;/p&gt;

&lt;p&gt;but we know that most cannot&lt;/p&gt;

&lt;p&gt;relative to their level of risk,&lt;/p&gt;

&lt;p&gt;since trading produces no net excess return&lt;/p&gt;

&lt;p&gt;but entails transaction costs,&lt;/p&gt;

&lt;p&gt;so unless you have inside information&lt;/p&gt;

&lt;p&gt;you are probably better off investing in an index fund.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An inadvertent data poem by
&lt;a href=&quot;https://www.usfca.edu/faculty/cindi-thompson&quot;&gt;Dr. Cindi Thompson&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Jul 2013 00:00:00 -0700</pubDate>
        <link>http://spencerboucher.com/on-being-approximate/</link>
        <guid isPermaLink="true">http://spencerboucher.com/on-being-approximate/</guid>
      </item>
    
      <item>
        <title>Keeping it real</title>
        <description>&lt;p&gt;Today I was listening to a Freakonomics podcast about prediction and
how monumentally terrible we are at it- even experts. The segment
featured some small European country that had passed a law to fine or
imprison psychics whose predictions were wrong. Why maintain such
strict standards for their predictions when we don’t hold anyone else
similarly accountable. In all honesty I’m not sure I wouldn’t be in
favor of such a law because such psychics are making the claim that
they are delivering a service that they are demonstrably &lt;em&gt;not&lt;/em&gt;
providing (i.e. &lt;em&gt;fraud&lt;/em&gt;), but that’s besides the point.&lt;/p&gt;

&lt;p&gt;The point is that it got me thinking about accountability for
predictions. They are everywhere, obviously. Pundits, politicians,
financial speculators (oh my)… We have fact checking organizations
that (to arguable degrees of success) provide a way of holding these
people to their claims about the past and present. Obviously we
couldn’t rightly hold these people’s predictions to the same standard
that we do (or often don’t) when they are reciting facts, but &lt;strong&gt;&lt;em&gt;why
the hell aren’t we keeping a track record&lt;/em&gt;&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;What if every time a president, congressman, political pundit, Fed
chairman, or otherwise high-profile “expert” made a prediction, we
entered it into a database? What if we actually kept statistics on how
often there predictions panned out? Right now all the incentives are
stacked to encourage wanton prediction-making, because we only keep
track of the &lt;em&gt;hits&lt;/em&gt;, and not the &lt;em&gt;misses&lt;/em&gt;. Why? Because right now we
are effectively letting the people who are making the predictions be
the ones who keep track of their success by &lt;em&gt;not calling them out&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If we switched the incentives around, its a game changer. First,
experts become more careful with their predictions, improving their
quality overall (because face it, right now they are almost always
less than worthless). Second, we the public get an idea of whose
predictions are actually worth listening to. I shudder (and then smile
a bit) to think about how many careers would be dashed upon the rocks
if the ability to produce this metric came about.&lt;/p&gt;

&lt;p&gt;I picture a website - freely available to all - maybe with individual
profiles for all the would-be Nostradomus. Maybe a staff of
statisticians would have to keep track of all the predictions made,
and users could suggest new profiles they would like to see added and
monitored. Picture Mint.com, but predictions instead of
transactions. For example, you could search Glenn Beck’s predictions
by category, by time-frame, or by outcome (yes, no, partial?), and get
awesome graphs and pie charts and a big ‘ole “percentage correct” next
to your name.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;
</description>
        <pubDate>Fri, 06 Jan 2012 00:00:00 -0800</pubDate>
        <link>http://spencerboucher.com/keeping-it-real/</link>
        <guid isPermaLink="true">http://spencerboucher.com/keeping-it-real/</guid>
      </item>
    
  </channel>
</rss>
