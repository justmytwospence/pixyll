<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spencer Boucher</title>
    <description></description>
    <link>http://spencerboucher.com/</link>
    <atom:link href="http://spencerboucher.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Maptime at Stamen</title>
        <description>&lt;p&gt;Last week, a classmate and I took a break from coursework to attend one of the
many great Meetup events that San Francisco has to offer for data science
practitioners. I’ve been pushing myself to attend at least one data-centric
Meetup every week, because these events are one of the most amazing parts about
going to school in the same place where so many of the biggest names work. To be
honest, I believe that becoming a presence in the data science scene and meeting
the movers and shakers is equally if not more important than coursework.&lt;/p&gt;

&lt;p&gt;I actually attended 3 meetups last week, one about D3.js at Trulia HQ, one about
GIS technologies and the Code for America HQ, and one about mapping at Stamen
HQ. I picked all three because they are relevant to a geospatial data
visualization that I am working on for my practicum at AutoGrid, but the last
one is what I’m going to talk a bit about, because it was the most hands-on.&lt;/p&gt;

&lt;p&gt;The workshop took place at Stamen Design’s headquarters in the Mission and was
led by Eric Theise; you can see his beautiful/informative slides (created using
&lt;a href=&quot;http://lab.hakim.se/reveal-js&quot;&gt;reveal.js&lt;/a&gt;) &lt;a href=&quot;http://erictheise.github.io/geostack-deck&quot;&gt;here&lt;/a&gt;. Some useful Q&amp;amp;A happened on
&lt;a href=&quot;http://www.meetup.com/Maptime-SF/events/147110652&quot;&gt;the Meetup event page as well&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This was actually a two-part workshop, but it was relatively painless to follow
the instructions and get up to speed for the part II, so you should really give
it a shot even now if it looks interesting.&lt;/p&gt;

&lt;p&gt;First we got postgres up and running on our machines. I have local installations
of MySQL, MongoDB, Hadoop and Hive up and running thanks to our course in
Distributed Databases, but our class didn’t have time to get to postgres within
a single credit hour. This, despite the fact that our professor admits to
postgres being the best database to use if you have anything to say about it.&lt;/p&gt;

&lt;p&gt;Next, we populated our database with some data from OpenStreetMap. Mike Migurski
extracts data from OSM for major metropolitan areas on a semi-regular basis, so
we used the San Francisco data [available on his web site][] via &lt;a href=&quot;http://wiki.openstreetmap.org/wiki/Osm2pgsql&quot;&gt;osm2pgsql&lt;/a&gt;,
a command-line utility that loads OpenStreetMap data into PostgreSQL databases.&lt;/p&gt;

&lt;p&gt;Then we used &lt;a href=&quot;https://www.mapbox.com/tilemill&quot;&gt;TileMill&lt;/a&gt;, MapBox’s desktop application, to visualize our
newborn database. We discovered how remarkably easy it can be to create vector
layers for data contained in such a postGIS database using the same old SQL and
CSS syntax you already know and love. Eric introduced us to some sensible
pre-baked &lt;a href=&quot;https://github.com/gravitystorm/openstreetmap-carto&quot;&gt;CartoCSS boilerplate&lt;/a&gt; courtesy of Andy Allen.&lt;/p&gt;

&lt;p&gt;Lastly, we used a nifty feature of TileMill to actually bake our own map tiles
and serve them up for use in our own maps. Note that if you want to do this,
you’ll need the &lt;a href=&quot;https://github.com/mapbox/mbutil&quot;&gt;mbutil command-line utility&lt;/a&gt;, not currently mentioned in the
slide deck.&lt;/p&gt;

&lt;p&gt;Not too shabby for 2 hours on a Wednesday night. Many thanks to the guys at
Stamen for hosting, especially Eric for all his work on the slides. Not to
mention the many other brilliant people who have made the tools and resources
that allow something this involved and grandiose to be done on a laptop by
someone who is still learning the ropes. Hands-on workshops like this are one of
the best ways to learn these technologies. Case in point, I may not have ever
stumbled across Mike or Andy’s resources had I not been learning directly from
people who are intimately familiar with the practical ins and outs of digital
cartography.&lt;/p&gt;

&lt;p&gt;Digital mapping is rapidly capturing my interest because of the beautifully
functional things one can do with it, and it seems like an amazing time to be
learning it, because the ecosystem is beginning to really flourish. Looking
forward to more events!&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Dec 2014 00:00:00 -0800</pubDate>
        <link>http://spencerboucher.com/maptime-at-stamen/</link>
        <guid isPermaLink="true">http://spencerboucher.com/maptime-at-stamen/</guid>
      </item>
    
      <item>
        <title>Fun with Sankey diagrams</title>
        <description>&lt;p&gt;I&amp;rsquo;m currently working on the final project for my data visualization course. The
dataset that I&amp;rsquo;ve chosen to work with can be &lt;a href=&quot;http://snap.stanford.edu/data/web-Reddit.html&quot;&gt;downloaded here&lt;/a&gt; &amp;ndash; it&amp;rsquo;s a
compendium Reddit resubmissions over a period of several years (ie, images that
were submitted to more than one and/or to multiple subreddits). I waffled for a
long time trying to decide what the best way to visualize the &lt;em&gt;flow&lt;/em&gt; of images
through various subreddits would be, but just in the nick of time, I stumbled
across Christopher Gandrud&amp;rsquo;s new &lt;a href=&quot;http://christophergandrud.github.io/d3Network/&quot;&gt;d3Network package for R&lt;/a&gt;, and that was
enough cause for me to settle on a Sankey diagram. If you&amp;rsquo;ve never heard of
Reddit, the illustrious CPG Grey will enlighten you.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;IPython.display&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YouTubeVideo&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;YouTubeVideo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;tlI022aUWQQ&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;iframe width=&quot;400&quot; height=300&quot; src=&quot;https://www.youtube.com/embed/tlI022aUWQQ&quot; frameborder=&quot;0&quot; allowfullscreen &gt;&lt;/iframe&gt;

&lt;p&gt;The task of massaging columnar data consisting of an image ID, subreddit name,
and timestamp for each submission into a more networky format suitable for this
type of visualization was interesting enough that I thought it might be a good
post. If nothing else, Christopher&amp;rsquo;s awesome package deserves some love.&lt;/p&gt;

&lt;p&gt;Python is my go-to language for data munging of this calibre, so we will use a
Pandas -&amp;gt; NetworkX -&amp;gt; R -&amp;gt; D3 worflow. Without further ado, lets load the Python
modules we will need and take a look at the data.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Load modules and data&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pd&lt;/span&gt;                        &lt;span class=&quot;c&quot;&gt;# For reading/munging the data&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;networkx&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;nx&lt;/span&gt;                      &lt;span class=&quot;c&quot;&gt;# For creating a graph structure&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;networkx.readwrite&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json_graph&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# For exporting a graph structure&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;itertools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;islice&lt;/span&gt;               &lt;span class=&quot;c&quot;&gt;# For some more interesting munging&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_ext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rmagic&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;IPython.display&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HTML&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;# To display results when we&#39;re done&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csvclean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redditSubmissions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;redditSubmissions_out.csv&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div style=&quot;max-height:1000px;max-width:1500px;overflow:auto;&quot;&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr style=&quot;text-align: right;&quot;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;#image_id&lt;/th&gt;
      &lt;th&gt;unixtime&lt;/th&gt;
      &lt;th&gt;rawtime&lt;/th&gt;
      &lt;th&gt;title&lt;/th&gt;
      &lt;th&gt;total_votes&lt;/th&gt;
      &lt;th&gt;reddit_id&lt;/th&gt;
      &lt;th&gt;number_of_upvotes&lt;/th&gt;
      &lt;th&gt;subreddit&lt;/th&gt;
      &lt;th&gt;number_of_downvotes&lt;/th&gt;
      &lt;th&gt;localtime&lt;/th&gt;
      &lt;th&gt;score&lt;/th&gt;
      &lt;th&gt;number_of_comments&lt;/th&gt;
      &lt;th&gt;username&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt; 0&lt;/td&gt;
      &lt;td&gt; 1333172439&lt;/td&gt;
      &lt;td&gt; 2012-03-31T12:40:39.590113-07:00&lt;/td&gt;
      &lt;td&gt;          And here&amp;rsquo;s a downvote.&lt;/td&gt;
      &lt;td&gt; 63470&lt;/td&gt;
      &lt;td&gt; rmqjs&lt;/td&gt;
      &lt;td&gt; 32657&lt;/td&gt;
      &lt;td&gt;    funny&lt;/td&gt;
      &lt;td&gt; 30813&lt;/td&gt;
      &lt;td&gt; 1333197639&lt;/td&gt;
      &lt;td&gt; 1844&lt;/td&gt;
      &lt;td&gt; 622&lt;/td&gt;
      &lt;td&gt; Animates_Everything&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt; 0&lt;/td&gt;
      &lt;td&gt; 1333178161&lt;/td&gt;
      &lt;td&gt; 2012-03-31T14:16:01.093638-07:00&lt;/td&gt;
      &lt;td&gt;                     Expectation&lt;/td&gt;
      &lt;td&gt;    35&lt;/td&gt;
      &lt;td&gt; rmun4&lt;/td&gt;
      &lt;td&gt;    29&lt;/td&gt;
      &lt;td&gt; GifSound&lt;/td&gt;
      &lt;td&gt;     6&lt;/td&gt;
      &lt;td&gt; 1333203361&lt;/td&gt;
      &lt;td&gt;   23&lt;/td&gt;
      &lt;td&gt;   3&lt;/td&gt;
      &lt;td&gt;       Gangsta_Raper&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt; 0&lt;/td&gt;
      &lt;td&gt; 1333199913&lt;/td&gt;
      &lt;td&gt; 2012-03-31T20:18:33.192906-07:00&lt;/td&gt;
      &lt;td&gt;                        Downvote&lt;/td&gt;
      &lt;td&gt;    41&lt;/td&gt;
      &lt;td&gt; rna86&lt;/td&gt;
      &lt;td&gt;    32&lt;/td&gt;
      &lt;td&gt; GifSound&lt;/td&gt;
      &lt;td&gt;     9&lt;/td&gt;
      &lt;td&gt; 1333225113&lt;/td&gt;
      &lt;td&gt;   23&lt;/td&gt;
      &lt;td&gt;   0&lt;/td&gt;
      &lt;td&gt;       Gangsta_Raper&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt; 0&lt;/td&gt;
      &lt;td&gt; 1333252330&lt;/td&gt;
      &lt;td&gt;        2012-04-01T10:52:10-07:00&lt;/td&gt;
      &lt;td&gt; Every time I downvote something&lt;/td&gt;
      &lt;td&gt;    10&lt;/td&gt;
      &lt;td&gt; ro7e4&lt;/td&gt;
      &lt;td&gt;     6&lt;/td&gt;
      &lt;td&gt; GifSound&lt;/td&gt;
      &lt;td&gt;     4&lt;/td&gt;
      &lt;td&gt; 1333277530&lt;/td&gt;
      &lt;td&gt;    2&lt;/td&gt;
      &lt;td&gt;   0&lt;/td&gt;
      &lt;td&gt;       Gangsta_Raper&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt; 0&lt;/td&gt;
      &lt;td&gt; 1333272954&lt;/td&gt;
      &lt;td&gt; 2012-04-01T16:35:54.393381-07:00&lt;/td&gt;
      &lt;td&gt;  Downvote &amp;amp;quot;Dies Irae&amp;amp;quot;&lt;/td&gt;
      &lt;td&gt;    65&lt;/td&gt;
      &lt;td&gt; rooof&lt;/td&gt;
      &lt;td&gt;    57&lt;/td&gt;
      &lt;td&gt; GifSound&lt;/td&gt;
      &lt;td&gt;     8&lt;/td&gt;
      &lt;td&gt; 1333298154&lt;/td&gt;
      &lt;td&gt;   49&lt;/td&gt;
      &lt;td&gt;   0&lt;/td&gt;
      &lt;td&gt;       Gangsta_Raper&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;5 rows × 13 columns&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Note that I first called &lt;code&gt;csvclean&lt;/code&gt;, from the
&lt;a href=&quot;http://csvkit.readthedocs.org/en/latest/index.html&quot;&gt;csvkit suite of command line utilities&lt;/a&gt;. The bang (!) symbol calls the
command line from IPython. &lt;code&gt;csvclean&lt;/code&gt; fixes a couple of formatting errors in the
original dataset that interfere with R/Panda&amp;rsquo;s parsing functions (something to
do with quotes or commas in the &amp;ldquo;title&amp;rdquo; field, I believe). The repaired CSV is
saved with a &lt;code&gt;_out&lt;/code&gt; prepended to the filename. Nothing fancy is required for the
&lt;code&gt;read_csv&lt;/code&gt; call in our case.&lt;/p&gt;

&lt;p&gt;Now for the hard/interesting part. How do we map the flow of each image
submission through the various subreddits?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First we sort by image and (crucially) timetamp on line 4.&lt;/li&gt;
&lt;li&gt;On line 5, I simply extract the 3 columns that we care about.&lt;/li&gt;
&lt;li&gt;Now we drop resubmissions of each image to the &lt;em&gt;same&lt;/em&gt; subreddit with
drop_duplicates on line 6, which only keeps each image&amp;rsquo;s &lt;em&gt;first&lt;/em&gt; submission
to a particular subreddit (why we sorted first).&lt;/li&gt;
&lt;li&gt;The last thing we need Pandas for is to group by image ID (line 7).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On line 7, we pull the list of subreddits (now unique and nicely ordered) for
each image. The nested list comprehension is necessary only because calling
&lt;code&gt;.subreddit&lt;/code&gt; on the groupby object &lt;code&gt;g&lt;/code&gt; returns a tuple by default, and we&amp;rsquo;d
rather have a list of lists.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Identify the order in which each image is submitted to various subreddits,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# removing repeats within a subreddit&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;#image_id&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;unixtime&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;\
     &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;#image_id&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;unixtime&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;subreddit&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;\
     &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drop_duplicates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;#image_id&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;subreddit&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;\
     &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;#image_id&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subreddit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we need a function &lt;code&gt;window&lt;/code&gt; that rolls along each of the lists in &lt;code&gt;flow&lt;/code&gt; and
connects every subsequent pair of subreddits that a particular image was
submitted to. We&amp;rsquo;ll do this with the help of the wonderful &lt;code&gt;itertools&lt;/code&gt; module,
creating two dimensional tuples that encode the &amp;ldquo;from&amp;rdquo; subreddit and the &amp;ldquo;to&amp;rdquo;
subreddit, respectively. In lines 14 and 15, we apply the function and flatten
the result to a single list.&lt;/p&gt;

&lt;p&gt;In order to truly capture the &amp;ldquo;flow,&amp;rdquo; however, we need to distinguish between
the &amp;ldquo;gifs&amp;rdquo; subreddit node where images are popping up for the first time and the
&amp;ldquo;gifs&amp;rdquo; subreddit node when the image has already appeared in another subreddit
(say, &amp;ldquo;pics&amp;rdquo;). The &lt;code&gt;enumerate&lt;/code&gt; in line 14 does this by tacking on the ordinality
to the name of the node, admittedly very hacky, but we have a lot of tuples
floating around already.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Roll along the list of subreddits each image has been submitted to,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# creating an edge tuple for each subsequent pair&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&#39;&#39;&#39;Returns a sliding window (of width n) over data from the iterable
       s -&amp;gt; (s0,s1,...s[n-1]), (s1,s2,...,sn), ...&#39;&#39;&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;islice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sankey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sankey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sublist&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sankey&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sublist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# flatten&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At last we have a list of edges that on some level describes the flow that we
are trying to get at. Now we can just iterate through them and use &lt;code&gt;NetworkX&lt;/code&gt; to
create the graph and weight the edges appropriately. In lines 10&amp;ndash;13, I prune
back the tiny edges that clutter up the diagram, and then the nodes that are no
longer associated with any edges. Last but not least, we export the structure to
a JSON in line 16.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Create network structure&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DiGraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sankey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;weight&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Trim edges&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove_edges_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;weight&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flagged&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out_degree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;3&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove_edges_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flagged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove_nodes_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;degree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Export&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;json_graph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;sankey.json&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;w&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Time for R!&lt;/p&gt;

&lt;p&gt;We will need to make sure that &lt;code&gt;d3Network&lt;/code&gt; is installed to the the instance of R
that is used by IPython&amp;rsquo;s &lt;code&gt;Rmagic&lt;/code&gt; via &lt;code&gt;Rpy2&lt;/code&gt;. It was different for me (I
think?) so if you are running something like this for the first time, include
the lines that are commented out.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;%%R&lt;/code&gt; denotes block-level R magicks in IPython (&lt;code&gt;%R&lt;/code&gt; will give you
line-level magicks)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-R&quot; data-lang=&quot;R&quot;&gt;&lt;span class=&quot;o&quot;&gt;%%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;install.packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;devtools&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;devtools&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;devtools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;install_github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;christophergandrud/d3Network&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d3Network&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is finally the point at which Christopher Gandrud&amp;rsquo;s package simplifies
everything for us. We simply read in the nodes and linkes (edges) from the JSON
file (they get converted to two dataframes). Note that we have to strip the
janky ordinality numbers that we tacked onto the node names (line 3). Now that
different nodes have the same names, the package will even make sure that each
subreddit node has the same color every time it appears!&lt;/p&gt;

&lt;p&gt;The call to &lt;code&gt;d3Sankey&lt;/code&gt; points to the the nodes dataframe, the links dataframe,
the name of the sources/targets in the links dataframe, the name of the column
that holds the link weights, and then some display configuration stuff.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-R&quot; data-lang=&quot;R&quot;&gt;&lt;span class=&quot;o&quot;&gt;%%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JSONtoDF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paste0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;sankey.json&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;nodes&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JSONtoDF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paste0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;sankey.json&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;links&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;d3Sankey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Nodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;source&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;target&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;weight&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NodeID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;standAlone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iframe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;sankey.html&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can render the resulting iframe directly in our IPython notebook! Hover over
edges for some nice brushing or click and drag the nodes to untangle a
relationship you&amp;rsquo;re interested in.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;HTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&amp;lt;iframe src=&quot;//gist.githubusercontent.com/justmytwospence/2c4e103693636b645f62/raw/71119ea1b0f427abd5d1d6cd4ec1e1f57e7ebf32/sankey.html&quot; height=540 width=700 frameBorder=&quot;0&quot;&amp;gt;&amp;lt;/iframe&amp;gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;iframe src=&quot;//gist.githubusercontent.com/justmytwospence/2c4e103693636b645f62/raw/71119ea1b0f427abd5d1d6cd4ec1e1f57e7ebf32/sankey.html&quot; height=540 width=700 frameBorder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;This type of &amp;ldquo;tiered&amp;rdquo; Sankey diagram is a little unconventional, but so far its
the best way I can come up with to visualize the interesting phenomenon of
submission flow through Reddit. Leave a comment if this gives you any
interesting ideas, I&amp;rsquo;d love to hear them!&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Mar 2014 00:00:00 -0700</pubDate>
        <link>http://spencerboucher.com/fun-with-sankey-diagrams/</link>
        <guid isPermaLink="true">http://spencerboucher.com/fun-with-sankey-diagrams/</guid>
      </item>
    
      <item>
        <title>Scheduling tasks in the cloud with EC2 APIs</title>
        <description>&lt;p&gt;This post is sort of an addendum to our &lt;a href=&quot;&quot;&gt;live-mapping project&lt;/a&gt;, but it should
also be of use to anyone looking to run an arbitrary script on a recurring
schedule. Originally, we set up a 24/7 instance on Amazon&amp;rsquo;s Elastic Compute
Cloud that ran a daily &lt;code&gt;cron&lt;/code&gt; job. This works, but its a bit wasteful because
we&amp;rsquo;re paying for 24 hours of cloud even though we&amp;rsquo;re only actually using it for
maybe 5 minutes a day.&lt;/p&gt;

&lt;p&gt;Fortunately, Amazon provides a &lt;a href=&quot;http://aws.amazon.com/developertools&quot;&gt;schmorgesborg&lt;/a&gt; of command line interface (CLI)
 tools that allow us to manage our cloud instances more
 efficiently. Specifically, we want to schedule an instance to spin up only once
 a day, execute our script, then shut back down. To accomplish this, we will
 want three CLI tools:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://aws.amazon.com/developertools/368&quot;&gt;the Amazon EC2 AMI Tools&lt;/a&gt;,
&lt;a href=&quot;http://aws.amazon.com/developertools/351&quot;&gt;the Amazon EC2 API Tools&lt;/a&gt;, and
&lt;a href=&quot;http://aws.amazon.com/developertools/2535&quot;&gt;the Auto Scaling Command Line Tool&lt;/a&gt;.
If you&amp;rsquo;re on a Mac, it&amp;rsquo;s way easier to get these with &lt;a href=&quot;https://brew.sh&quot;&gt;Homebrew&lt;/a&gt;
than by downloading from Amazon&amp;rsquo;s website:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;brew install ec2-ami-tools &lt;span class=&quot;c&quot;&gt;# For creating an AMI from an existing machine&lt;/span&gt;
brew install ec2-api-tools &lt;span class=&quot;c&quot;&gt;# For registering and launching instances&lt;/span&gt;
brew install aws-as &lt;span class=&quot;c&quot;&gt;# For creating auto scaling groups/defining schedules&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As an extra Homebrew bonus, running &lt;code&gt;brew info ec2-ami-tools&lt;/code&gt;, &lt;code&gt;brew info
ec2-api-tools&lt;/code&gt;, and &lt;code&gt;brew info aws-as&lt;/code&gt; will now tell us exactly what we need to
do to get our authentication and environment variables all set up. First we are
told to download the necessary .pem files from the Amazon console and place them
into a new hidden directory of our home directory &lt;code&gt;.ec2&lt;/code&gt;. Then we tell our
command line where everything lives now by inserting the following lines into
our &lt;code&gt;.bashrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EC2_PRIVATE_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;/bin/ls &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;/.ec2/pk-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.pem | /usr/bin/head -1&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EC2_CERT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;/bin/ls &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;/.ec2/cert-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.pem | /usr/bin/head -1&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EC2_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/local/Cellar/ec2-api-tools/1.6.12.0/libexec&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EC2_AMITOOL_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/local/Cellar/ec2-ami-tools/1.4.0.9/libexec&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EC2_REGION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;us-west-2&quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EC2_ZONE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EC2_REGION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;a
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EC2_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://&lt;span class=&quot;nv&quot;&gt;$EC2_REGION&lt;/span&gt;.ec2.amazonaws.com
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;AWS_AUTO_SCALING_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://autoscaling.&lt;span class=&quot;nv&quot;&gt;$EC2_REGION&lt;/span&gt;.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Its pretty simple, but if you have any trouble with this part, refer to the
official &lt;a href=&quot;http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/SettingUp_CommandLine.html&quot;&gt;Amazon documentation for setting up the command line&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Because these environment variables are recognized out of the box by the CLI
tools, we won&amp;rsquo;t need to point to our authentication keys or specify a region
every time we make an API call and our next commands will be much more
succinct. Note that every EC2 instance is physically located at one of several
regions; we are using us-west-2 because it happens to be where I spun up the
existing instance that currently holds our &amp;ldquo;update.py&amp;rdquo; script, but any of them
would probably work just fine for the simple job at hand.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Region&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ap-northeast-1&lt;/td&gt;
&lt;td&gt;Asia Pacific (Tokyo) Region&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ap-southeast-1&lt;/td&gt;
&lt;td&gt;Asia Pacific (Singapore) Region&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ap-southeast-2&lt;/td&gt;
&lt;td&gt;Asia Pacific (Sydney) Region&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;eu-west-1&lt;/td&gt;
&lt;td&gt;EU (Ireland) Region&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sa-east-1&lt;/td&gt;
&lt;td&gt;South America (Sao Paulo) Region&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;us-east-1&lt;/td&gt;
&lt;td&gt;US East (Northern Virginia) Region&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;us-west-1&lt;/td&gt;
&lt;td&gt;US West (Northern California) Region&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;us-west-2&lt;/td&gt;
&lt;td&gt;US West (Oregon) Region&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;So, first things first. We can&amp;rsquo;t just spin up an off-the-rack EC2 instance every
day, because we&amp;rsquo;ll run into the same problem that I originally had with my web
host: the Python modules that we need won&amp;rsquo;t be installed. We &lt;em&gt;could&lt;/em&gt; write a
script that would install &lt;code&gt;pip&lt;/code&gt; plus all of the requisite Python modules and run
it first thing after we launch the instance, but there&amp;rsquo;s a better way:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ec2-create-image i-8918e1be -n &lt;span class=&quot;s2&quot;&gt;&quot;Map Update Image&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This command from &lt;code&gt;ec2-ami-tools&lt;/code&gt; creates an &amp;ldquo;Amazon Machine Image&amp;rdquo; of the
instance that we previously had running and names it &amp;ldquo;Map Update Image&amp;rdquo;. A new
image ID will now print to your console, &lt;code&gt;ami-fcdfb9cc&lt;/code&gt; in my case. This is
tantamount to cloning the instance, because we can now reference the new image
ID when we spin up new instances and all of our modules, scripts, etc. will be
there waiting for us. Note that I removed the instance&amp;rsquo;s &lt;code&gt;cron&lt;/code&gt; job &lt;em&gt;before&lt;/em&gt;
creating the AMI, because we&amp;rsquo;ll now be handling the task scheduling from
&lt;em&gt;outside&lt;/em&gt; the instance, via &lt;strong&gt;autoscaling&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Next let&amp;rsquo;s write a shell script that will execute our Python map-updating
script, shoot us a diagnostic email, then shut down the instance that its
running on. The idea here is that once a day we&amp;rsquo;re going to spin up an instance
using our shiny new AMI and immediately run this new script (let&amp;rsquo;s call it
&amp;ldquo;update.sh&amp;rdquo;) that will do its business and then promptly commit seppuku and stop
charging us money. Eric Hammond has created a great template on &lt;a href=&quot;http://alestic.com/2011/11/ec2-schedule-instance&quot;&gt;his blog&lt;/a&gt;,
which I&amp;rsquo;ve modified below. Note the execution of our &lt;a href=&quot;&quot;&gt;familiar&lt;/a&gt; &amp;ldquo;update.py&amp;rdquo;
script highlighted on line 4, and the apoptosis command on line 46:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash -x exec &amp;gt; &amp;gt;(tee /var/log/user-data.log|logger -t user-data -s 2&amp;gt;/dev/console) 2&amp;gt;&amp;amp;1&lt;/span&gt;

/usr/bin/python /home/ubuntu/update.py &lt;span class=&quot;c&quot;&gt;# Run the script&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;EMAIL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;spencer.g.boucher@gmail.com

&lt;span class=&quot;c&quot;&gt;# Upgrade and install Postfix so we can send a sample email export&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DEBIAN_FRONTEND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;noninteractive apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get upgrade -y &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get
install -y postfix

&lt;span class=&quot;c&quot;&gt;# Get some information about the running instance instance_id=$(wget -qO-&lt;/span&gt;
instance-data/latest/meta-data/instance-id&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;public_ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;wget -qO-
instance-data/latest/meta-data/public-ipv4&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;wget -qO-
instance-data/latest/meta-data/placement/availability-zone&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;expr match
&lt;span class=&quot;nv&quot;&gt;$zone&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;\(.*\).&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;uptime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;uptime&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Send status email /usr/sbin/sendmail -oi -t -f $EMAIL &amp;lt;&amp;lt;EOM From: $EMAIL To:&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$EMAIL&lt;/span&gt; Subject: Results of EC2 scheduled script

This email message was generated on the following EC2 instance:

  instance id: &lt;span class=&quot;nv&quot;&gt;$instance_id&lt;/span&gt; region: &lt;span class=&quot;nv&quot;&gt;$region&lt;/span&gt; public ip: &lt;span class=&quot;nv&quot;&gt;$public_ip&lt;/span&gt; uptime:
  &lt;span class=&quot;nv&quot;&gt;$uptime&lt;/span&gt;

If the instance is still running, you can monitor the output of this job using a
&lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;like:

  ssh ubuntu@&lt;span class=&quot;nv&quot;&gt;$public_ip&lt;/span&gt; tail -1000f /var/log/user-data.log

  ec2-describe-instances --region &lt;span class=&quot;nv&quot;&gt;$region&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$instance_id&lt;/span&gt;

EOM

&lt;span class=&quot;c&quot;&gt;# Give the script and email some time to do their thing sleep 600 # 10 minutes&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# This will stop the EBS boot instance, stopping the hourly charges.  # Have&lt;/span&gt;
Auto Scaling terminate it, stopping the storage charges.  &lt;span class=&quot;c&quot;&gt;# shutdown -h now&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the user data script that we pass to the launch configuration executes
with &lt;em&gt;root&lt;/em&gt; permissions, not as the user &amp;ldquo;ubuntu&amp;rdquo; that you would typically log
in as via &lt;code&gt;ssh&lt;/code&gt;. Its probably best to be as explicit as possible when specifying
path names in the cloud, the tilde operator might turn around and bite you.&lt;/p&gt;

&lt;p&gt;Now we need to create &lt;strong&gt;launch configuration&lt;/strong&gt; that will basically do all the
button-pushing that we would normally be doing at the AWS console GUI.&lt;/p&gt;

&lt;p&gt;Here we specify:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Micro&amp;rdquo; as our instance type.&lt;/li&gt;
&lt;li&gt;Our shell script &amp;ldquo;update.sh&amp;rdquo; from step 2 as the &amp;ldquo;user-data-file&amp;rdquo;. User data
files are passed into the instance and executed immediately when supplied in
the launch configuration. They must be less than 16kb as I suppose they are
stored on some ancillary server somewhere.&lt;/li&gt;
&lt;li&gt;The AMI image that we cloned in step 1 from the instance that included our
Python modules.&lt;/li&gt;
&lt;li&gt;The name of the launch config; let&amp;rsquo;s call it &amp;ldquo;map-update-launch-config&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;as-create-launch-config &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --instance-type t1.micro &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --user-data-file ~/Desktop/update.sh &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --image-id ami-fcdfb9cc &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --launch-config &lt;span class=&quot;s2&quot;&gt;&quot;map-update-launch-config&quot;&lt;/span&gt;
as-describe-launch-configs --headers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the second line provides a list of all the launch configurations that
have been created.&lt;/p&gt;

&lt;p&gt;We must also create an &lt;strong&gt;auto scaling group&lt;/strong&gt;. These are typically used as a
sort of container to which we can add/remove instances on a schedule or in
response to heavy traffic, but we can also use it to schedule a single instance
to flick on and off. We need to tell it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A name to assign the scaling group (&amp;ldquo;map-update-scale-group&amp;rdquo;).&lt;/li&gt;
&lt;li&gt;The name of the launch configuration we created in step 3
(&amp;ldquo;map-update-launch-config&amp;rdquo;).&lt;/li&gt;
&lt;li&gt;Which availability zone we want to use (basically irrelevant; we set our
environment variable &lt;code&gt;EC2_ZONE&lt;/code&gt; to &amp;ldquo;a&amp;rdquo;
earlier). &lt;code&gt;ec2-describe-available-zones&lt;/code&gt; provides a list of the available
zones&lt;/li&gt;
&lt;li&gt;A minimum and maximum number of instances in the group. We&amp;rsquo;ll initialize these
to zero.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;as-create-auto-scaling-group &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--auto-scaling-group &lt;span class=&quot;s2&quot;&gt;&quot;map-update-scale-group&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --launch-configuration &lt;span class=&quot;s2&quot;&gt;&quot;map-update-launch-config&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --availability-zones &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$EC2_ZONE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --min-size 0 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --max-size 0
as-suspend-processes &lt;span class=&quot;s2&quot;&gt;&quot;map-update-scale-group&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --processes ReplaceUnhealthy
as-describe-auto-scaling-groups --headers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the second line, we are using &lt;code&gt;as-suspend-processes&lt;/code&gt; to prevent the
instance&amp;rsquo;s default behavior which is to attempt to restart after it is shut
down. The third line provides a list of all the auto scaling groups that have
been created.&lt;/p&gt;

&lt;p&gt;Last but not least, we are ready to assign a schedule to our auto scaling
group. Here we create two: one to start the instance and one to terminate the
instance. Astute readers will recall that &amp;ldquo;update.sh&amp;rdquo; already &lt;em&gt;stops&lt;/em&gt; the
instance so that we aren&amp;rsquo;t paying to have it running, but we also need to
completely &lt;em&gt;terminate&lt;/em&gt; the instance so that we aren&amp;rsquo;t paying to store
information about it. Each schedule requires:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  A name (&lt;code&gt;&amp;quot;map-update-start&amp;quot;&lt;/code&gt; &amp;amp; &lt;code&gt;&amp;quot;map-update-stop&amp;quot;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;  The name of the auto scaling group we created in step 4
(&amp;ldquo;map-update-scale-group&amp;rdquo;).&lt;/li&gt;
&lt;li&gt;  How we want to scale. By setting both &lt;code&gt;min-size&lt;/code&gt; and &lt;code&gt;max-size&lt;/code&gt; to 1, we are
effectively turning on one instance. We later effectively turn that instance
back off by setting both to 0.&lt;/li&gt;
&lt;li&gt;  A &amp;ldquo;recurrence,&amp;rdquo; ie when to occur. This flag uses the same syntax that &lt;code&gt;cron&lt;/code&gt;
does. Here we set the instance to launch at midnight UTC (&lt;code&gt;0 0 * * *&lt;/code&gt;), and
terminate 15 minutes later (&lt;code&gt;15 0 * * *&lt;/code&gt;). Recall that our script already
stops the instance 10 minutes after execution, so 15 minutes is playing it
safe.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;as-put-scheduled-update-group-action &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --name &lt;span class=&quot;s2&quot;&gt;&quot;map-update-start&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --auto-scaling-group &lt;span class=&quot;s2&quot;&gt;&quot;map-update-scale-group&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --min-size 1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --max-size 1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --recurrence &lt;span class=&quot;s2&quot;&gt;&quot;0 0 * * *&quot;&lt;/span&gt;
as-put-scheduled-update-group-action &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --name &lt;span class=&quot;s2&quot;&gt;&quot;map-update-stop&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --auto-scaling-group &lt;span class=&quot;s2&quot;&gt;&quot;map-update-scale-group&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --min-size 0 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --max-size 0 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --recurrence &lt;span class=&quot;s2&quot;&gt;&quot;15 0 * * *&quot;&lt;/span&gt;
as-describe-scheduled-actions --headers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As before, the third line provides a list of the actions that have been
scheduled.&lt;/p&gt;

&lt;p&gt;And thats it! We are now only paying for 10 or 15 minutes of cloud per day, as
opposed to 1,440 of them. To review the timeline we have created in this
example: our auto scaling group boots up an instance up at midnight UTC that
immediately executes &amp;ldquo;update.sh&amp;rdquo;. This automatically executes &amp;ldquo;update.py&amp;rdquo; and
shoots us a diagnostic email. It then waits 10 minutes to make sure everything
has time to run, before stopping the instance. 5 minutes after &lt;em&gt;that&lt;/em&gt; the auto
scaling group then completely terminates the instance.&lt;/p&gt;

&lt;p&gt;Other great resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.aws.amazon.com/AutoScaling/latest/DeveloperGuide/WhatIsAutoScaling.html&quot;&gt;Official Amazon documentation for scheduling auto scaling groups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://alestic.com/2011/11/ec2-schedule-instance&quot;&gt;Running EC2 Instances on a Recurring Schedule with Auto Scaling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robertsindall.co.uk/blog/how-to-use-amazons-auto-scaling-groups&quot;&gt;Summary of API commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cardinalpath.com/autoscaling-your-website-with-amazon-web-services-part-2&quot;&gt;Auto Scaling Your Website with Amazon Web Services&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 12 Jan 2014 00:00:00 -0800</pubDate>
        <link>http://spencerboucher.com/ec2-apis/</link>
        <guid isPermaLink="true">http://spencerboucher.com/ec2-apis/</guid>
      </item>
    
      <item>
        <title>Stratified sampling in R</title>
        <description>&lt;p&gt;I was surprised to find that R doesn’t have a base function for stratified
random sampling. There’s not even a well known package I could find that does
this in a straight forward way. So heres my own.&lt;/p&gt;

&lt;p&gt;It is essentially a wrapper for a ddply call that samples each subset and then
combines them. If the size argument is less than 1, it will be interpreted as
the percentage of each stratification subset that should be sampled. If the size
argument is greater than 1, it will be interpreted as the number of observations
to sample from each stratification subset.&lt;/p&gt;

&lt;p&gt;Note that in the first case, a different number of observations will be taken
from each subset depending on their total number of observations. In the second
case however, an equal number of observations will be sampled from each subset,
regardless of their total number of observations.&lt;/p&gt;

&lt;p&gt;The .by argument is formulated the same way it is for any other ddply call.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-R&quot; data-lang=&quot;R&quot;&gt;&lt;span class=&quot;n&quot;&gt;stratified_sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;.by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;37L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plyr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;set.seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;df.sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ddply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;.by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),])&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                     &lt;span class=&quot;n&quot;&gt;.progress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;text&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df.sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Fri, 10 Jan 2014 00:00:00 -0800</pubDate>
        <link>http://spencerboucher.com/stratified-sampling-in-r/</link>
        <guid isPermaLink="true">http://spencerboucher.com/stratified-sampling-in-r/</guid>
      </item>
    
      <item>
        <title>Live mapping</title>
        <description>&lt;p&gt;I&amp;rsquo;ve been wanting to do some more mapping stuff since my first encounter with
Leaflet a month or two ago while I was working on a project for [AutoGrid][]. I
had my eye on CartoDB&amp;rsquo;s time series library, [Torque][], because I had really
wanted to do some time-series visualization, but time constraints and privacy
issues with uploading data to CartoDB&amp;rsquo;s servers prevented me from really
exploring. Since I had a few days of free time over winter break, I played
around with it a bit and came up with this: &lt;a href=&quot;http://www.spencerboucher.com/map&quot;&gt;spencerboucher.com/map&lt;/a&gt;. How&amp;rsquo;d I
do it?&lt;/p&gt;

&lt;p&gt;First I needed some geographic data, so I turned to a source of data I&amp;rsquo;ve been
collected for almost a year - my own location. [OpenPaths][] is a mobile app
that records your location at regular time intervals. I opted for every 30
minutes at first, then upped it to every 15 minutes when I discovered that the
effect on battery life wasn&amp;rsquo;t nearly as bad as I expected it to be. OpenPaths is
a project of [the R&amp;amp;D department at The New York Times][] and they &lt;a href=&quot;https://openpaths.cc/FAQ&quot;&gt;claim&lt;/a&gt;
that you are the only one with access to the collected data. Interestingly, you
can grant various &lt;a href=&quot;https://openpaths.cc/projects&quot;&gt;research programs&lt;/a&gt; access to your data at your own
discretion. Your data is conveniently downloadable as a csv, json, or kml file,
so I easily pulled my dataset of ~3,000 time points since
December 2012. Unfortunately, I made the switch from iPhone to Android around
April (well, that part is fortunate), and forgot to re-download the app, so I
only really have data from the around the first three months and last two months
of 2013.&lt;/p&gt;

&lt;p&gt;Turns out, making impressive maps with CartoDB is almost embarrassingly
easy. Their GUI is pretty intuitive and running queries on their postgreSQL
database is simple. Even time series stuff built on the Torque backend is really
just point and click. I decided that the best way to visualize this data was
with an aggregated hexbin heatmap of all my past locations, overlaid with a
point-by-point replay with a time-slider. From there, it was just a one-line API
call to host the map on my website (line 30 highlighted below), which is
significantly easier than the legwork that went into crafting a Leaflet map
&amp;ldquo;manually.&amp;rdquo;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;initial-scale=1.0, user-scalable=no&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Location | Spencer&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;shortcut icon&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://spencerboucher.com/map/favicon.png&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://libs.cartocdn.com/cartodb.js/v3/themes/css/cartodb.css&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--[if lte IE 8]&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;http://libs.cartocdn.com/cartodb.js/v3/themes/css/cartodb.ie.css&quot; /&amp;gt;
  &amp;lt;![endif]--&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;style &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;#cartodb-gmaps-attribution&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;visibility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maps.google.com/maps/api/js?v=3.2&amp;amp;sensor=false&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://libs.cartocdn.com/cartodb.js/v3/cartodb.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;cartodb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createVis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;map&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;http://justmytwospence.cartodb.com/api/v2/viz/e8fd87d0-78b3-11e3-a9e9-e7941b6e2df0/viz.json&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onload=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;init()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;map&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is pretty awesome, but in light of how easy it all was, I was almost
disappointed. Can we take it one step further? Let&amp;rsquo;s put on our
&lt;a href=&quot;http://quantifiedself.com/about/&quot;&gt;Quantified Self&lt;/a&gt; hats and set about to make this map &lt;em&gt;live&lt;/em&gt;. There&amp;rsquo;s three
components to making this happen, so we&amp;rsquo;ll step through them one at a
time. First we need to access the most recent data from OpenPaths (there&amp;rsquo;s an
API for that!), and then we need to insert that data into CartoDB&amp;rsquo;s database
(guess what, there&amp;rsquo;s an API for that too). Last but not least, we need to
schedule that data transplant to occur on a regular basis. The Unix utility
&lt;code&gt;cron&lt;/code&gt; is the canonical tool for this type of thing, so this seemed like a good
time to learn how to use it.&lt;/p&gt;

&lt;p&gt;Python has a reputation for being a great &amp;ldquo;glue&amp;rdquo; language, so that&amp;rsquo;s what we&amp;rsquo;ll
use to build this script.&lt;/p&gt;

&lt;p&gt;Programmatically accessing your data from OpenPaths is super simple. This piece
of our script is pulled more or less verbatim from
&lt;a href=&quot;https://openpaths.cc/api&quot;&gt;the OpenPaths API documentation&lt;/a&gt;. Line 21 (highlighted below) is key - this
is where we specify which data you want to pull for injection into the CartoDB
database. Here we will grab the last 24 hours of data (~96 readings, if you&amp;rsquo;re
collecting every 15 minutes like me), getting the results in a nice
JSON-formatted variable named &lt;code&gt;data&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;oauth2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ACCESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;redacted&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SECRET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;redacted&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;https://openpaths.cc/api/1&#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build_auth_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&#39;oauth_version&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&#39;oauth_nonce&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oauth2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate_nonce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&#39;oauth_timestamp&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;consumer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oauth2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ACCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SECRET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;oauth_consumer_key&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oauth2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;signature_method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oauth2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SignatureMethod_HMAC_SHA1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sign_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signature_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;start_time&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;end_time&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# get the last 24 hours&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s?&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlencode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AutoGrid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Torque&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cartodb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torque&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OpenPaths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;openpaths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;department&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;York&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nytlabs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#print(query)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build_auth_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;GET&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HTTPError&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we need to get our new &lt;code&gt;data&lt;/code&gt; variable into CartoDB&amp;rsquo;s postgreSQL
server. &lt;a href=&quot;http://developers.cartodb.com/documentation/sql-api.html&quot;&gt;CartoDB&amp;rsquo;s SQL API documentation&lt;/a&gt; makes this possible, and there&amp;rsquo;s
even a &lt;a href=&quot;https://github.com/vizzuality/cartodb-python&quot;&gt;python module&lt;/a&gt; that wraps OAuth2 to simplify things. Although its
still in the early stages of development, this module works fine for our current
purposes; all we have to do is send it a string that holds the SQL query we want
to run. So now we&amp;rsquo;ll just write a for-loop that successively builds an &lt;code&gt;INSERT&lt;/code&gt;
query for each element in &lt;code&gt;data&lt;/code&gt; (lines 18-20 highlighted below).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cartodb&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CartoDBException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CartoDBAPIKey&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;&#39;spencer.g.boucher@gmail.com&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;&#39;redacted&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cartodb_domain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;justmytwospence&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;API_KEY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;redacted&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CartoDBAPIKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;API_KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cartodb_domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reading&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;alt&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;reading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;device&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lat&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;lat&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lon&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;lon&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;reading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;os&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;t&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;reading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;version&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;query_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;INSERT INTO openpaths_justmytwospence (alt, date, device, lat,  lon, os, version, the_geom) &quot;&lt;/span&gt;
                       &lt;span class=&quot;s&quot;&gt;&quot;VALUES ({0}, abstime({1}), &#39;{2}&#39;, {3}, {4}, &#39;{5}&#39;, &#39;{6}&#39;, ST_ SetSRID(ST_Point({4}, {3}), 4326))&quot;&lt;/span&gt;
                      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CartoDBException&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;some error ocurred&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A few notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  It would certainly be faster to insert all of the new data into the
database using a single &lt;code&gt;INSERT&lt;/code&gt; statement, but that would require
some more tedious text parsing and execution speed isn&amp;rsquo;t
particularly important to us. As it stands, it takes about six
seconds to post a day&amp;rsquo;s worth of data.&lt;/li&gt;
&lt;li&gt;  One posgreSQL &amp;ldquo;gotcha&amp;rdquo; had me hung up for quite some time: single quotes
parse fine but double quotes do not.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;ST_SetSRID&lt;/code&gt; is a &lt;a href=&quot;http://postgis.org/docs/ST_SetSRID.html&quot;&gt;PostGIS command&lt;/a&gt; that converts a lon/lat pair
(in that order - another &amp;ldquo;gotcha&amp;rdquo;) to the necessary geometry object.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Last but not least, we need this script to run automatically. Because we&amp;rsquo;ve
written the script to transplant 24 hours of data, we&amp;rsquo;ll need to run it once a
day in order to capture all of the data that&amp;rsquo;s being generated. I tried to set
up my web host, &lt;a href=&quot;https://laughingsquid.us/&quot;&gt;LaughingSquid&lt;/a&gt;, to do this, but unfortunately they don&amp;rsquo;t
grant shell access so we can&amp;rsquo;t install all those fancy python modules that we&amp;rsquo;ve
already used. Its totally possible to rewrite the script to use only modules
from the &lt;a href=&quot;http://docs.python.org/2/library/&quot;&gt;Python Standard Library&lt;/a&gt;, but this would turn a simple task into a
tedious one. Manually implementing OAuth in particular would be a total pain in
the rear, and classes are just about to resume after all, so a different
solution is in order. Let&amp;rsquo;s spin up a &lt;a href=&quot;http://aws.amazon.com/&quot;&gt;&amp;ldquo;micro&amp;rdquo; EC2 instance&lt;/a&gt; instead. This
gives us free reign to install whatever we need for the low low cost of ¢.02 per
hour. This does start to add up, but our Master&amp;rsquo;s program gives us some pretty
substantial Amazon Web Services credit that goes mostly unused, so we aren&amp;rsquo;t too
upset :). UPDATE: A new post provides details about how to schedule Amazon EC2
instances - &lt;a href=&quot;http://www.spencerboucher.com/ec2-apis/&quot;&gt;http://www.spencerboucher.com/ec2-apis/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After &lt;code&gt;pip install&lt;/code&gt;ing everything we need and &lt;code&gt;scp&lt;/code&gt;ing our python script (let&amp;rsquo;s
call it update.py) into the home directory of our remote server, all we need to
do is set up a crontab with the &lt;code&gt;crontab -e&lt;/code&gt; command and add the following line:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;@daily /usr/bin/python ~/update.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;@daily&lt;/code&gt; is actually a shortcut for &lt;code&gt;* * * * *&lt;/code&gt;, where each asterix is a
placeholder for the (respectively) minute, hour, day of month, month, and day of
week that the script should executed. This shortcut defaults to midnight every
day, which is really as good as anything for our purposes.&lt;/p&gt;

&lt;p&gt;Voilà! Now we can step back and relax, knowing that we don&amp;rsquo;t have to do a single
thing and our map will continue to show the most up-to-date data available.&lt;/p&gt;

&lt;p&gt;A few final notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We might reasonably want to lag our script by a week or so, for
security/privacy reasons.&lt;/li&gt;
&lt;li&gt;As far as I can tell, the location readings are recorded in a &lt;a href=&quot;http://en.wikipedia.org/wiki/Unix_time&quot;&gt;POSIX time&lt;/a&gt;
and have not been adjusted by time zone, so they are still in the &lt;a href=&quot;http://en.wikipedia.org/wiki/Coordinated_Universal_Time&quot;&gt;UTC&lt;/a&gt;
time zone. This means that they are 8 hours off from the actual time in
California, where I usually am. This doesn&amp;rsquo;t bother me too much at the moment
because the visualization is still relatively low resolution in the time
domain anyways. At some point I might implement the relevant transformation,
but this will raise its own issues because I won&amp;rsquo;t &lt;em&gt;always&lt;/em&gt; be in California,
not to mention all that Daylight Savings nonsense.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.spencerboucher.com/ec2-apis/&quot;&gt;There is an addendum&lt;/a&gt; to this post that will take you through how to schedule the EC2 instance and avoid having it run 24/7.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 08 Jan 2014 00:00:00 -0800</pubDate>
        <link>http://spencerboucher.com/live-mapping/</link>
        <guid isPermaLink="true">http://spencerboucher.com/live-mapping/</guid>
      </item>
    
      <item>
        <title>On being approximate</title>
        <description>&lt;blockquote&gt;
&lt;p&gt;It is hard to tell how many investors beat the stock market&lt;/p&gt;

&lt;p&gt;over the long run,&lt;/p&gt;

&lt;p&gt;because the data is very noisy,&lt;/p&gt;

&lt;p&gt;but we know that most cannot&lt;/p&gt;

&lt;p&gt;relative to their level of risk,&lt;/p&gt;

&lt;p&gt;since trading produces no net excess return&lt;/p&gt;

&lt;p&gt;but entails transaction costs,&lt;/p&gt;

&lt;p&gt;so unless you have inside information&lt;/p&gt;

&lt;p&gt;you are probably better off investing in an index fund.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An inadvertent data poem by &lt;a href=&quot;https://www.usfca.edu/faculty/cindi-thompson&quot;&gt;Dr. Cindi Thompson&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Jul 2013 00:00:00 -0700</pubDate>
        <link>http://spencerboucher.com/on-being-approximate/</link>
        <guid isPermaLink="true">http://spencerboucher.com/on-being-approximate/</guid>
      </item>
    
      <item>
        <title>Keeping it real</title>
        <description>&lt;p&gt;Today I was listening to a Freakonomics podcast about prediction and how
monumentally terrible we are at it- even experts. The segment featured some
small European country that had passed a law to fine or imprison psychics whose
predictions were wrong. Why maintain such strict standards for their predictions
when we don’t hold anyone else similarly accountable. In all honesty I’m not
sure I wouldn’t be in favor of such a law because such psychics are making the
claim that they are delivering a service that they are demonstrably &lt;em&gt;not&lt;/em&gt;
providing (i.e. &lt;em&gt;fraud&lt;/em&gt;), but that’s besides the point.&lt;/p&gt;

&lt;p&gt;The point is that it got me thinking about accountability for predictions. They
are everywhere, obviously. Pundits, politicians, financial speculators (oh my)…
We have fact checking organizations that (to arguable degrees of success)
provide a way of holding these people to their claims about the past and
present. Obviously we couldn’t rightly hold these people’s predictions to the
same standard that we do (or often don’t) when they are reciting facts, but
&lt;strong&gt;&lt;em&gt;why the hell aren’t we keeping a track record&lt;/em&gt;&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;What if every time a president, congressman, political pundit, Fed chairman, or
otherwise high-profile “expert” made a prediction, we entered it into a
database? What if we actually kept statistics on how often there predictions
panned out? Right now all the incentives are stacked to encourage wanton
prediction-making, because we only keep track of the &lt;em&gt;hits&lt;/em&gt;, and not the
&lt;em&gt;misses&lt;/em&gt;. Why? Because right now we are effectively letting the people who are
making the predictions be the ones who keep track of their success by &lt;em&gt;not
calling them out&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If we switched the incentives around, its a game changer. First, experts become
more careful with their predictions, improving their quality overall (because
face it, right now they are almost always less than worthless). Second, we the
public get an idea of whose predictions are actually worth listening to. I
shudder (and then smile a bit) to think about how many careers would be dashed
upon the rocks if the ability to produce this metric came about.&lt;/p&gt;

&lt;p&gt;I picture a website - freely available to all - maybe with individual profiles
for all the would-be Nostradomus. Maybe a staff of statisticians would have to
keep track of all the predictions made, and users could suggest new profiles
they would like to see added and monitored. Picture Mint.com, but predictions
instead of transactions. For example, you could search Glenn Beck’s predictions
by category, by time-frame, or by outcome (yes, no, partial?), and get awesome
graphs and pie charts and a big ‘ole “percentage correct” next to your name.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;
</description>
        <pubDate>Fri, 06 Jan 2012 00:00:00 -0800</pubDate>
        <link>http://spencerboucher.com/keeping-it-real/</link>
        <guid isPermaLink="true">http://spencerboucher.com/keeping-it-real/</guid>
      </item>
    
      <item>
        <title>The new face of education</title>
        <description>&lt;p&gt;We are on the brink of one of the most radical paradigm shifts to affect human
society in millennia. OK, maybe that that sounds obvious to a lot of people what
with the explosion of innovation that the internet and other new technologies
over the past decade or two. But I’m talking about a total revamping of an
institution that has existed as long as language has existed- indeed, as long as
*we*have existed: education.&lt;/p&gt;

&lt;p&gt;Education has barely changed one iota in the last thousand years of its
practice. Plato and Socrates taught their classes essentially the &lt;em&gt;same way&lt;/em&gt;
that a modern philosophy or science class is taught - hell, we still use the
&lt;em&gt;Socratic method&lt;/em&gt; in modern classes (this isn’t a claim that the method is
ineffective, merely a demonstration of how long current practices have existed
without drastic change). Dozens of students congregate where the one who has the
knowledge is located, and this one knowledgable person teaches a concept to the
students and answers questions. The only change in the late 1900s was that there
were significantly more places where this happened - called
colleges/universities.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://spencerboucher.com/images/plato.jpg&quot; alt=&quot;Oldschool... school&quot;&gt;&lt;/p&gt;

&lt;p&gt;But colleges/universities were designed in an ancient world. They were built to
spread knowledge in an era of very few knowledgable people relative to the
entire population, when the most efficient way - and indeed the *only*way - of
conducting this transfer of knowledge was face-to-face. This is no longer the
world that we live in. Courtesy of modern technology, we live in a globally
connected world with accessible experts in any field you’d care to study, and I
don’t think that modern institutions of higher learning will survive the
shift. At least not in a state that anywhere near resembles the way they operate
now.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://spencerboucher.com/images/lecturehall.jpg&quot; alt=&quot;Exhibit A&quot;&gt;&lt;/p&gt;

&lt;p&gt;If you want to get an idea of what the new face of eduction will be like, look
to Stanford University, the bleeding edge of the move toward the new system.&lt;/p&gt;

&lt;p&gt;This semester, two Stanford-level courses were made available &lt;em&gt;for free&lt;/em&gt; to
&lt;em&gt;anyone&lt;/em&gt; with an internet connection: Introduction to Artificial Intelligence
and Machine Learning. These courses were taught by some of the biggest names in
the field. Andrew Ng and his team created the Machine Learning course, which is
the one that I am currently enrolled in, so its the one I’ll talk about.&lt;/p&gt;

&lt;p&gt;Over 65,000 students are enrolled (spoiler alert - its &lt;em&gt;everywhere&lt;/em&gt;). Skimming
the extensive “introductions” section of the class forum reveals that these
students are incredibly diverse, from software engineer professionals working
here in silicon valley to high school students in poor eastern European
communities and absolutely everything in between.&lt;/p&gt;

&lt;p&gt;Online courses in and of themselves are not particularly new- institutions such
as &lt;a href=&quot;http://ocw.mit.edu&quot;&gt;MIT&lt;/a&gt;, &lt;a href=&quot;http://webcast.berkeley.edu&quot;&gt;Berkeley&lt;/a&gt;, &lt;a href=&quot;http://oyc.yale.edu&quot;&gt;Yale&lt;/a&gt;, and many other traditionally well known
schools have been making lectures and course materials available online for
years. The key difference is that this new wave of online courses are designed
specifically and exclusively for the new global audience. This is immediately
apparent in the presentation of the lectures, the format of the homework
assignments, and the design of the curriculum. The result is a learning
experience that I argue rivals that of any traditional college course.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://spencerboucher.com/images/forwardpropagation.jpg&quot; alt=&quot;Example slides&quot;&gt;&lt;/p&gt;

&lt;p&gt;The homework assignments for Ng’s class include quizzes that solidify the
students intuition of the concept, combined with specific programming problem
sets that gives the student a handle on concrete implementation of the ideas
using Octave (a freeware version of MATLAB). As someone who has taken similar
MATLAB courses at a well known private university, I can confidently attest to
the relative efficacy of the new format.&lt;/p&gt;

&lt;p&gt;There are differences of course. To clear up misunderstandings that I have, I
used to go to a review session- usually led by a TA- who would try to answer the
questions of dozens of students within a few hours. Now- I simply post a
question to the class forum and have it answered *very*quickly by up to dozens
of knowledgable practitioners- many of whom are already implementing similar
programming techniques in their line of work.&lt;/p&gt;

&lt;p&gt;Another significant difference is that instead of 200 different lecturers
teaching the same topic to 65,000 learners, we have 1. This may strike some as a
disadvantage- but in the future, this system will allow the best lecturers to
float to the top. Think about how much more cost effective this is- if we
replace 200 lecturers with 1, we are cutting the costs of education by a factor
of hundreds, not to mention drastically expanding the number of students we can
reach.&lt;/p&gt;

&lt;p&gt;Note that in the above point I mention only *lecturers,*not *teachers.*What I
believe we will see is a simultaneous centralization of certain aspects of
education and decentralization of others. In an increasingly connected world,
everyone becomes a teacher. Are you a computer programmer? You are also going to
be a programming teacher. Are you a marketing analyst? Guess what, you are also
going to be a teacher of marketing. In a way that seems contradictory at first-
this consolidation of our currently bloated educational system will provide the
infrastructure necessary to bring back peer-to-peer transfer of knowledge.&lt;/p&gt;

&lt;p&gt;Stanford is expanding their open courses next semester, and my prediction is
that it only gets bigger from here.  Below is a list of the next classes to be
offered (still trying to decide which ones I will have the time to participate
in!). I highly recommend them to everyone who is at all interested.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://spencerboucher.com/images/course-selection.jpg&quot; alt=&quot;Course selection&quot;&gt;&lt;/p&gt;

&lt;p&gt;The role of the university will have to change dramatically if and when such a
system becomes the norm. One key role they will have to play lies in
accreditation. (At least for now) students enrolled in these Education2.0
courses do so merely for the knowledge gained. There is no course credit gained
which is a double edged sword. On the one hand, it means students are that much
more collaborative. Cheating becomes a non-issue in such an environment. The key
question becomes how to decide which students are qualified for a given job,
etc. Instead of having accreditation agencies give the seal of approval to other
institutions who then parcel out degrees, we might see a move toward tests or
other processes to directly accreditate individuals.&lt;/p&gt;

&lt;p&gt;I could continue to wildly speculate on the issue and I have lots more ideas
about how things might pan out (future blog topics might include how
&lt;a href=&quot;http://www.khanacademy.org&quot;&gt;Khan Academy&lt;/a&gt; is turning primary school education on its head, or how studio
schools and apprenticeship systems are on the rise as well). If you disagree or
would like to point out how any of these particular ideas are crazy, leave a
comment! Please! All that I do know is that with tuition prices rising
&lt;em&gt;outrageously&lt;/em&gt; every year while wonderful free alternative options begin to
proliferate, &lt;strong&gt;something’s gotta give.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Nov 2011 00:00:00 -0800</pubDate>
        <link>http://spencerboucher.com/the-new-face-of-education/</link>
        <guid isPermaLink="true">http://spencerboucher.com/the-new-face-of-education/</guid>
      </item>
    
      <item>
        <title>Brainssssss</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://spencerboucher.com/images/stanford.gif&quot; alt=&quot;Stanford University&quot;&gt;&lt;/p&gt;

&lt;p&gt;About a month ago the topic of &lt;a href=&quot;http://stanfordesp.org&quot;&gt;SPLASH&lt;/a&gt; came up in one
of our weekly lab meetings. Its a great (if somewhat sneaky) way for us to
recruit new control subjects because the students are the perfect age for our
pediatric studies. We just have to get the kids psyched enough to pester their
parents to the point that they contact us. Our lab has taught classes in
previous years on rummaging, etc. and gotten a few recruits out of it.&lt;/p&gt;

&lt;p&gt;A coworker and I were brainstorming class ideas when we hit upon a sure winner-
“Brainssssss: The Neuroscience of Zombies.”  SPLASH took place over Halloween
weekend this year after all, and we thought it would be the perfect way to walk
the fine line between being fun and interesting enough to keep kids excited and
being academically legitimate enough to take seriously.&lt;/p&gt;

&lt;p&gt;The class was way fun to plan and even more fun to teach. I managed to get in
touch with the neuroanatomy TA in the medical school, who hooked us up with some
preserved human brains- one full brain, one hemisphere, one set of coronal
slices, a segment of spinal cord, and some dura matter too. It was surprising
how easily we procured them!  No background check or signing of papers, just a
few emails and an explanation of how to keep them moist and always use gloves
before we were sent on our way with two buckets full of brains (very subtly
labelled “Whole Brain”). We got them a week early, so they were a huge hit with
everyone in our lab. It was interesting how many people who study the brain for
a living have never seen one in the flesh (as it were). The first thing anyone
seeing a brain for the first time notices is how &lt;em&gt;small&lt;/em&gt; they are. But that mere
3 pounds of meat can learn calculus, predict the future, or even fall in
love. Crazy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://spencerboucher.com/images/brain.jpg&quot; alt=&quot;A brain!&quot;&gt;&lt;/p&gt;

&lt;p&gt;Some more emails got me in touch with a guy named Brad Voytek who does research
up the peninsula at UCSF. Brad is on the advisory board of the Zombie Research
Society and it would appear that we accidentally stumbled upon a phenomenon that
is already gaining momentum- the field of zombie research! Check out the
&lt;a href=&quot;http://zombieresearch.org&quot;&gt;Zombie Research Society&lt;/a&gt; as well as his personal bog
&lt;a href=&quot;blog.ketyov.com&quot;&gt;Oscillatory Thoughts&lt;/a&gt;.  The ZRS is simultaneously a fun way to introduce
basic neuroscience to a public audience (just as we had thought!), while also
poking fun at some of the more questionable aspects of cognitive neuroscience
research (eg: look doing X lights up area Y… now we understand X!). Much
gratitude for all their assistance!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://spencerboucher.com/images/axial.jpg&quot; alt=&quot;A &amp;quot;zombie&amp;quot; brain!&quot;&gt;&lt;/p&gt;

&lt;p&gt;The class itself went great. We had kids brainstorm characteristics of zombies
(slow lumbering walk, lack of emotions, insatiable appetite for human flesh,
etc.) and then delved into which brain regions would be impaired in order for us
to see these specific defecits in behavior. And of course we played Thriller and
showed multiple clips from Shaun of the Dead. I think the kids really liked it,
and of course you can’t go wrong when you get to show them real brains.&lt;/p&gt;

&lt;p&gt;We signed up for 4 sections of 30 students each, which apparently was way more
than the average class size of 5 to 10 students. A scheduling mishap left us
with only 3 sections, so we set up in an empty room during the lunch period and
I went outside and rounded up another class-worth of kids to make up the
difference. Additionally, we were contacted by an administrator to teach our
class to some of the parents as a sample SPLASH class. The parents class kind of
turned into a Q &amp;amp; A session of general neuroscience questions, which was
actually really fun. We got some real great questions from kids too: “can
zombies get high?” , “would tranquilizers work on zombies?” , and from a
tentative girl at the end of class “wait… zombies are real?”&lt;/p&gt;

&lt;p&gt;Overall it was a great success, we got out a lot of fliers, and lots of
kids/parents sounded very interested in our research at Stanford. I’m hoping to
get more involved with SPLASH at Stanford next semester!&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Nov 2011 00:00:00 -0800</pubDate>
        <link>http://spencerboucher.com/brainssssss/</link>
        <guid isPermaLink="true">http://spencerboucher.com/brainssssss/</guid>
      </item>
    
      <item>
        <title>Where science meets sci-fi</title>
        <description>&lt;p&gt;Every now and then something comes along that just makes your jaw drop with its
sheer brilliance and monumental implications. When that happens in science, it
usually feels like you are dropping into a science fiction story, and thats
exactly the feeling I got when I listened to Dr. Deisseroth’s talk at one of
Stanford’s neuroscience symposiums. It might be old news to many and I did
actually already know a bit about the subject, but hearing about this new
technology straight from the guy who made it happen and hearing about the
directions it’s going in really made me excited.&lt;/p&gt;

&lt;p&gt;Oh, whats this new miracle technology? Optogenics. Its gonna be huge. Trust me.&lt;/p&gt;

&lt;p&gt;Optogenetics is seriously one of the biggest baddest research tools to hit
neuroscience research EVER. The implications reach much farther than another new
imaging technique (eg like EEG, MRI) and are more along the lines of something
like the voltage clamp in the early days of single-cell recording.&lt;/p&gt;

&lt;p&gt;Basically what you can do with optogenetics is selectively genetically modify a
subset of neurons by causing them to express protein channels that open/close in
response to certain frequencies of light. To a layperson this might not sound
impressive until you know that opening these channels is how a neuron actually
&lt;em&gt;fires&lt;/em&gt;. So- stated another way- you SHINE LIGHT ON A NEURON AND IT TURNS
ON. And this works IN VIVO. In MAMMALS.  All you have to do is wire up some
fiber optic cables into the skull. By being strategic in which types of neurons
we genetically modify, we can therefore choose to activate specific neural
networks with specific goals in mind.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://spencerboucher.com/images/mouse.jpg&quot; alt=&quot;Optogenetics&quot;&gt;&lt;/p&gt;

&lt;p&gt;This is where things start getting unreal. Since the technology first broke
through here at Stanford in 2005, the practical applications have been rolling
out. For example, by deactivating reward centers of the brain when when mice are
exposed to cocaine, they SHOW NO COCAINE PREFERENCE TO WATER! Normally, mice
will eschew absolutely anything in favor of cocaine- including food and
water. But with a little light shining on the area (and the correct previous
genetic modification) the mice are essentially temporarily cured of cocaine
dependence!&lt;/p&gt;

&lt;p&gt;Of course thats over-simplifying things. For example, we are probably actually
eliminating the mouse’s desire to experience reward to ANY stimulus at all, so
its not exactly a palatable cure. But its fun to picture a future using this
technology. What if cocaine addicts could volunteer to have fiber optic cables
hooked into &lt;em&gt;their&lt;/em&gt; skull, and just pressed a button whenever they encountered
cocaine. The effects are extremely transient- so maybe they could experience
pleasure normally until they really really need to be impervious to
temptation. Could we do the same for nicotine addicts?&lt;/p&gt;

&lt;p&gt;This is really only the tip of the iceberg.  Researchers have used optogenetic
paradigms to make mice STOP in their tracks or &lt;a href=&quot;http://www.youtube.com/watch?v=v7uRFVR9BPU&quot;&gt;move in endless circles&lt;/a&gt;, as
well as to
&lt;a href=&quot;http://vimeo.com/12300587&quot;&gt;instantly turn the normally timid creatures into much bolder versions of themselves&lt;/a&gt;.
both of these particular examples can be particularly scary if applied to
humans. a coworker at the same talk painted a rather perplexing scenario as we
were walking back. imagine a dystopian future in which a government vaccinations
of all children include a dose of a harmless virus that primes our brains for
such light treatment.  Deisseroth hinted that technology for achieving optic
stimulation trans-cranially is not too far in the future… what if a police
officer had merely to point a laser at someone’s head to have them literally
freeze in place?&lt;/p&gt;

&lt;p&gt;Deisseroth was asked in the Q&amp;amp;A about human applications, but he claimed that
his group was excited enough about its current use in animal research that it
wasn’t thinking ahead to any form of clinical research or trial. He totally
smirked when he was saying it though. A sort of- this is what my lawyer thinks I
should say so nobody gets scared- kinda look. Either way- the future is super
bright in this area (pun unintended!). It has already won the “method of the
year” award for 2010 and I would bet 100 bucks there’s a Nobel Prize in the
future for Deisseroth (which is incredible because he is so young!)  Its awesome
that the origin and hub of this research is here at Stanford. Its definitely
something I’d like to look more into- I could see myself going into graduate
school to work on this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://spencerboucher.com/images/deisseroth.jpg&quot; alt=&quot;Deisseroth himself&quot;&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 18 Oct 2011 00:00:00 -0700</pubDate>
        <link>http://spencerboucher.com/where-science-meets-sci-fi/</link>
        <guid isPermaLink="true">http://spencerboucher.com/where-science-meets-sci-fi/</guid>
      </item>
    
  </channel>
</rss>
